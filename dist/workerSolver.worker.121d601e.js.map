{"mappings":"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","sources":["node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat.js","src/core/utils/quaternion.js","src/core/utils/constants.js","src/core/Frame.js","src/core/utils/euler.js","src/core/utils/glmatrix.js","src/core/Joint.js","src/core/utils/solver.js","node_modules/linear-solve/gauss-jordan.js","node_modules/svd-js/build-umd/svd-js.min.js","src/core/utils/matrix.js","src/core/ChainSolver.js","src/core/MatrixPool.js","src/core/Link.js","src/core/Goal.js","src/worker/utils.js","src/worker/workerSolver.worker.js","src/core/Solver.js","src/core/utils/findRoots.js","src/worker/serialize.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import { vec4 } from 'gl-matrix';\n\nconst tempQuat = new Float64Array( 16 );\nexport function smallestDifferenceQuaternion( output, a, b ) {\n\n\t// inverting all values yields the same rotation\n\tvec4.scale( tempQuat, b, - 1 );\n\n\t// return the quat that represents the smallest difference\n\tif ( vec4.squaredDistance( a, tempQuat ) < vec4.squaredDistance( a, b ) ) {\n\n\t\tvec4.subtract( output, a, tempQuat );\n\n\t} else {\n\n\t\tvec4.subtract( output, a, b );\n\n\t}\n\n}\n\nconst tempQuat2 = new Float64Array( 16 );\nexport function quaternionDistance( a, b ) {\n\n\tsmallestDifferenceQuaternion( tempQuat2, a, b );\n\treturn vec4.length( tempQuat2 );\n\n}\n\nexport function quaternionSquaredDistance( a, b ) {\n\n\tsmallestDifferenceQuaternion( tempQuat2, a, b );\n\treturn vec4.squaredLength( tempQuat2 );\n\n}\n","const PI = Math.PI;\nconst PI2 = 2 * PI;\nconst HALF_PI = PI / 2;\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 1 / DEG2RAD;\n\nexport { PI, PI2, HALF_PI, DEG2RAD, RAD2DEG };\n","import { mat4, quat, vec3 } from 'gl-matrix';\nimport { quaternionSquaredDistance } from './utils/quaternion.js';\nimport { RAD2DEG } from './utils/constants.js';\n\nconst tempInverse = new Float32Array( 16 );\nconst tempMatrix = new Float32Array( 16 );\nconst tempQuat = new Float32Array( 4 );\nconst tempPos = new Float32Array( 3 );\nconst sharedTraversedChildren = new Set();\nconst sharedTraverseArray = [];\nlet traverseVariablesInUse = false;\n\nexport class Frame {\n\n\tconstructor() {\n\n\t\tthis.name = '';\n\n\t\tthis.quaternion = new Float32Array( [ 0, 0, 0, 1 ] );\n\t\tthis.position = new Float32Array( 3 );\n\n\t\tthis.matrix = new Float32Array( 16 );\n\t\tmat4.identity( this.matrix );\n\n\t\tthis.matrixWorld = new Float32Array( 16 );\n\t\tmat4.identity( this.matrixWorld );\n\n\t\tthis.matrixNeedsUpdate = false;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t}\n\n\tsetPosition( ...args ) {\n\n\t\tconst position = this.position;\n\n\t\tif ( vec3.sqrDist( position, args ) > 1e-10 ) {\n\n\t\t\tposition[ 0 ] = args[ 0 ];\n\t\t\tposition[ 1 ] = args[ 1 ];\n\t\t\tposition[ 2 ] = args[ 2 ];\n\t\t\tthis.setMatrixNeedsUpdate();\n\n\t\t}\n\n\t}\n\n\tsetEuler( x, y, z ) {\n\n\t\tquat.fromEuler( tempQuat, x * RAD2DEG, y * RAD2DEG, z * RAD2DEG );\n\t\tthis.setQuaternion( ...tempQuat );\n\n\t}\n\n\tsetQuaternion( ...args ) {\n\n\t\tconst quaternion = this.quaternion;\n\t\tif ( quaternionSquaredDistance( quaternion, args ) > 1e-10 ) {\n\n\t\t\tquaternion[ 0 ] = args[ 0 ];\n\t\t\tquaternion[ 1 ] = args[ 1 ];\n\t\t\tquaternion[ 2 ] = args[ 2 ];\n\t\t\tquaternion[ 3 ] = args[ 3 ];\n\t\t\tthis.setMatrixNeedsUpdate();\n\n\t\t}\n\n\t}\n\n\tsetWorldPosition( x, y, z ) {\n\n\t\tconst parent = this.parent;\n\n\t\ttempPos[ 0 ] = x;\n\t\ttempPos[ 1 ] = y;\n\t\ttempPos[ 2 ] = z;\n\n\t\tif ( parent ) {\n\n\t\t\tparent.updateMatrixWorld();\n\t\t\tmat4.invert( tempInverse, parent.matrixWorld );\n\t\t\tvec3.transformMat4( tempPos, tempPos, tempInverse );\n\n\t\t}\n\n\t\tthis.setPosition( ...tempPos );\n\n\t}\n\n\tsetWorldEuler( x, y, z ) {\n\n\t\tquat.fromEuler( tempQuat, x * RAD2DEG, y * RAD2DEG, z * RAD2DEG );\n\t\tthis.setWorldQuaternion( ...tempQuat );\n\n\t}\n\n\tsetWorldQuaternion( x, y, z, w ) {\n\n\t\tconst parent = this;\n\n\t\ttempQuat[ 0 ] = x;\n\t\ttempQuat[ 1 ] = y;\n\t\ttempQuat[ 2 ] = z;\n\t\ttempQuat[ 3 ] = w;\n\n\t\tif ( parent ) {\n\n\t\t\tparent.updateMatrixWorld();\n\t\t\tmat4.invert( tempInverse, parent.matrixWorld );\n\t\t\tmat4.fromQuat( tempMatrix, tempQuat );\n\t\t\tmat4.multiply( tempMatrix, tempInverse, tempMatrix );\n\t\t\tmat4.getRotation( tempQuat, tempMatrix );\n\n\t\t}\n\n\t\tthis.setQuaternion( ...tempQuat );\n\n\t}\n\n\tgetWorldPosition( arr ) {\n\n\t\tthis.updateMatrixWorld();\n\t\tmat4.getTranslation( arr, this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( arr ) {\n\n\t\tthis.updateMatrixWorld();\n\t\tmat4.getRotation( arr, this.matrixWorld );\n\n\t}\n\n\ttraverseParents( cb ) {\n\n\t\t// Use the shared variables if they're not already in use to avoid\n\t\t// memory allocation\n\t\tlet traversedChildren;\n\t\tconst originalVariablesInUse = traverseVariablesInUse;\n\t\tif ( traverseVariablesInUse ) {\n\n\t\t\ttraversedChildren = new Set();\n\n\t\t} else {\n\n\t\t\ttraversedChildren = sharedTraversedChildren;\n\t\t\ttraversedChildren.clear();\n\n\t\t}\n\n\t\ttraverseVariablesInUse = true;\n\n\t\tlet curr = this.parent;\n\t\twhile ( curr ) {\n\n\t\t\tif ( traversedChildren.has( curr ) ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tconst stop = cb( curr );\n\t\t\tif ( stop ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\ttraversedChildren.add( curr );\n\t\t\tcurr = curr.parent;\n\n\t\t}\n\n\t\ttraverseVariablesInUse = originalVariablesInUse;\n\t\ttraversedChildren.clear();\n\n\t}\n\n\ttraverse( cb ) {\n\n\t\t// Use the shared variables if they're not already in use to avoid\n\t\t// memory allocation\n\t\tconst originalVariablesInUse = traverseVariablesInUse;\n\t\tlet traversedChildren;\n\t\tlet stack;\n\t\tif ( traverseVariablesInUse ) {\n\n\t\t\ttraversedChildren = new Set();\n\t\t\tstack = [ this ];\n\n\t\t} else {\n\n\t\t\ttraversedChildren = sharedTraversedChildren;\n\t\t\ttraversedChildren.clear();\n\n\t\t\tstack = sharedTraverseArray;\n\t\t\tstack[ 0 ] = this;\n\n\t\t}\n\n\t\ttraverseVariablesInUse = true;\n\n\t\tlet i = 0;\n\t\tlet tot = 1;\n\t\twhile ( i < tot ) {\n\n\t\t\tconst curr = stack[ i ];\n\t\t\tconst stop = cb( curr );\n\t\t\tif ( ! stop ) {\n\n\t\t\t\tconst children = curr.children;\n\t\t\t\tfor ( let c = 0, l = children.length; c < l; c ++ ) {\n\n\t\t\t\t\tconst child = children[ c ];\n\t\t\t\t\tif ( traversedChildren.has( child ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttraversedChildren.add( child );\n\t\t\t\t\t\tstack[ tot ] = child;\n\t\t\t\t\t\ttot ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\ttraverseVariablesInUse = originalVariablesInUse;\n\t\ttraversedChildren.clear();\n\t\tstack.fill( null );\n\n\t}\n\n\tfind( cb ) {\n\n\t\tlet result = null;\n\t\tthis.traverse( c => {\n\n\t\t\tif ( result ) {\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( cb( c ) ) {\n\n\t\t\t\tresult = c;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} );\n\t\treturn result;\n\n\t}\n\n\taddChild( child ) {\n\n\t\tif ( child.parent ) {\n\n\t\t\tthrow new Error( 'Frame: Added child must not already have a parent.' );\n\n\t\t}\n\n\t\tif ( child === this ) {\n\n\t\t\tthrow new Error( 'Frame: Frame cannot be added as a child to itself.' );\n\n\t\t}\n\n\t\tthis.traverseParents( p => {\n\n\t\t\tif ( p === child ) {\n\n\t\t\t\tthrow new Error( 'Frame: Added child is an ancestor of this Frame. Use Joint.makeClosure instead.' );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tchild.parent = this;\n\t\tthis.children.push( child );\n\n\t\tchild.setMatrixWorldNeedsUpdate();\n\n\t}\n\n\tremoveChild( child ) {\n\n\t\tif ( child.parent !== this ) {\n\n\t\t\tthrow new Error( 'Frame: Child to be removed is not a child of this Frame.' );\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( child );\n\n\t\tthis.children.splice( index, 1 );\n\t\tchild.parent = null;\n\n\t\tchild.setMatrixWorldNeedsUpdate();\n\n\t}\n\n\tattachChild( child ) {\n\n\t\tthis.updateMatrixWorld();\n\t\tchild.updateMatrixWorld();\n\n\t\tthis.addChild( child );\n\n\t\tmat4.invert( tempInverse, this.matrixWorld );\n\t\tmat4.multiply( child.matrix, tempInverse, child.matrixWorld );\n\t\tmat4.getTranslation( child.position, child.matrix );\n\t\tmat4.getRotation( child.quaternion, child.matrix );\n\n\t}\n\n\tdetachChild( child ) {\n\n\t\tthis.updateMatrixWorld();\n\t\tchild.updateMatrixWorld();\n\n\t\tthis.removeChild( child );\n\n\t\tmat4.copy( child.matrix, child.matrixWorld );\n\t\tmat4.getTranslation( child.position, child.matrix );\n\t\tmat4.getRotation( child.quaternion, child.matrix );\n\n\t}\n\n\tcomputeMatrixWorld() {\n\n\t\tif ( this.parent ) {\n\n\t\t\tmat4.multiply( this.matrixWorld, this.parent.matrixWorld, this.matrix );\n\n\t\t} else {\n\n\t\t\tmat4.copy( this.matrixWorld, this.matrix );\n\n\t\t}\n\n\t}\n\n\tsetMatrixNeedsUpdate() {\n\n\t\tif ( this.matrixNeedsUpdate === false ) {\n\n\t\t\tthis.matrixNeedsUpdate = true;\n\t\t\tthis.setMatrixWorldNeedsUpdate();\n\n\t\t}\n\n\t}\n\n\tsetMatrixWorldNeedsUpdate() {\n\n\t\tthis.traverse( c => {\n\n\t\t\tif ( c.matrixWorldNeedsUpdate ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tc.matrixWorldNeedsUpdate = true;\n\t\t\treturn false;\n\n\t\t} );\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tif ( this.matrixNeedsUpdate ) {\n\n\t\t\tmat4.fromRotationTranslation( this.matrix, this.quaternion, this.position );\n\t\t\tthis.matrixNeedsUpdate = false;\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( updateChildren = false ) {\n\n\t\tconst { parent } = this;\n\n\t\tif ( this.matrixWorldNeedsUpdate ) {\n\n\t\t\t// Climb the parent chain and update parent matrices\n\t\t\tif ( parent && parent.matrixWorldNeedsUpdate ) {\n\n\t\t\t\tparent.updateMatrixWorld( false );\n\n\t\t\t}\n\n\t\t\t// Update this matrix\n\t\t\tthis.updateMatrix();\n\n\t\t\t// Update this matrix world and dirty children\n\t\t\tthis.computeMatrixWorld();\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t}\n\n\t\t// Update child matrices\n\t\tif ( updateChildren ) {\n\n\t\t\tthis.traverse( c => {\n\n\t\t\t\tif ( this !== c ) {\n\n\t\t\t\t\tc.updateMatrixWorld( false );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n","import { vec3 } from 'gl-matrix';\nimport { PI, PI2, HALF_PI } from './constants.js';\n\n// Clamp the given angle to ( - PI, PI ]\nfunction clampEulerValue( value ) {\n\n\tlet result = value % PI2;\n\tif ( result > PI ) {\n\n\t\tresult -= PI2;\n\n\t} else if ( result <= - PI ) {\n\n\t\tresult += PI2;\n\n\t}\n\n\treturn result;\n\n}\n\n// Convert `toAdjust` to be the equivalent rotation that is closest to target.\nfunction toSmallestEulerValueDistance( target, toAdjust ) {\n\n\tconst wholeRotation = Math.round( target / PI2 ) * PI2;\n\tconst clampedValue = clampEulerValue( toAdjust );\n\n\tlet result = wholeRotation + clampedValue;\n\tconst delta = result - target;\n\tif ( Math.abs( delta ) > PI ) {\n\n\t\tresult -= Math.sign( delta ) * PI2;\n\n\t}\n\n\treturn result;\n\n}\n\n// Convert the set of euler angles toAdjust to the smallest equivalent rotation\n// that is closest to target.\nfunction toSmallestEulerDistance( output, target, toAdjust ) {\n\n\toutput[ 0 ] = toSmallestEulerValueDistance( target[ 0 ], toAdjust[ 0 ] );\n\toutput[ 1 ] = toSmallestEulerValueDistance( target[ 1 ], toAdjust[ 1 ] );\n\toutput[ 2 ] = toSmallestEulerValueDistance( target[ 2 ], toAdjust[ 2 ] );\n\n}\n\n// Return the total diff between euler values\nfunction diffEulerDistance( a, b ) {\n\n\t// if `a` or `b` is a redundant twist representation then we convert them to the\n\t// closest twist variation\n\n\tlet result =\n\t\tMath.abs( a[ 0 ] - b[ 0 ] ) +\n\t\tMath.abs( a[ 1 ] - b[ 1 ] ) +\n\t\tMath.abs( a[ 2 ] - b[ 2 ] );\n\n\treturn result;\n\n}\n\n// Convert the given euler angles to an equivalent rotation\nfunction getRedundantEulerRepresentation( output, input ) {\n\n\toutput[ 0 ] = input[ 0 ] + PI;\n\toutput[ 1 ] = PI - input[ 1 ];\n\toutput[ 2 ] = input[ 2 ] + PI;\n\n}\n\nfunction isRedundantTwist( euler ) {\n\n\tconst pivotAngle = clampEulerValue( euler[ 1 ] );\n\tif ( Math.abs( Math.abs( pivotAngle ) - HALF_PI ) > 1e-7 ) {\n\n\t\treturn false;\n\n\t}\n\n\treturn true;\n\n}\n\n// If toAdjust has a redundant rotation axis then find the representation that's closest to\n// the target set of angles.\nfunction toSmallestRedundantTwistRepresentation( output, target, toAdjust ) {\n\n\tif ( ! isRedundantTwist( toAdjust ) ) {\n\n\t\treturn false;\n\n\t}\n\n\tconst pivotAngle = clampEulerValue( toAdjust[ 1 ] );\n\n\t// we have a redundant axis\n\tconst zRotationSign = - 1 * Math.sign( pivotAngle );\n\tconst combinedXRotation = toAdjust[ 0 ] + zRotationSign * toAdjust[ 2 ];\n\n\toutput[ 0 ] = target[ 0 ];\n\toutput[ 1 ] = toSmallestEulerValueDistance( target[ 1 ], toAdjust[ 1 ] );\n\toutput[ 2 ] = toSmallestEulerValueDistance( target[ 2 ], zRotationSign * ( combinedXRotation - target[ 0 ] ) );\n\n\ttoSmallestEulerDistance( output, target, output );\n\n\treturn true;\n\n}\n\n// Returns the closest euler representation\nconst tempEuler1 = new Float64Array( 3 );\nconst tempEuler2 = new Float64Array( 3 );\nfunction getClosestEulerRepresentation( output, target, input ) {\n\n\tlet score = Infinity;\n\tif ( isRedundantTwist( input ) ) {\n\n\t\ttoSmallestRedundantTwistRepresentation( tempEuler1, target, input );\n\n\t\t// TODO: is checking the redundant direction necessary here?\n\t\tgetRedundantEulerRepresentation( tempEuler2, input );\n\t\ttoSmallestRedundantTwistRepresentation( tempEuler2, target, tempEuler2 );\n\n\t\tconst d1 = diffEulerDistance( target, tempEuler1 );\n\t\tconst d2 = diffEulerDistance( target, tempEuler2 );\n\t\tif ( d1 < d2 ) {\n\n\t\t\tvec3.copy( output, tempEuler1 );\n\t\t\tscore = d1;\n\n\t\t} else {\n\n\t\t\tvec3.copy( output, tempEuler2 );\n\t\t\tscore = d2;\n\n\t\t}\n\n\t}\n\n\t// There seems to be a chance that these representations are \"closer\" than the twist ones\n\t// in the twist case. Possibly due to numerical precision?\n\ttoSmallestEulerDistance( tempEuler1, target, input );\n\n\tgetRedundantEulerRepresentation( tempEuler2, input );\n\ttoSmallestEulerDistance( tempEuler2, target, tempEuler2 );\n\n\tconst d1 = diffEulerDistance( target, tempEuler1 );\n\tconst d2 = diffEulerDistance( target, tempEuler2 );\n\tif ( d1 < score || d2 < score ) {\n\n\t\tif ( d1 < d2 ) {\n\n\t\t\tvec3.copy( output, tempEuler1 );\n\n\t\t} else {\n\n\t\t\tvec3.copy( output, tempEuler2 );\n\n\t\t}\n\n\t}\n\n\n}\n\nexport {\n\tclampEulerValue,\n\ttoSmallestEulerValueDistance,\n\ttoSmallestEulerDistance,\n\tdiffEulerDistance,\n\tgetRedundantEulerRepresentation,\n\ttoSmallestRedundantTwistRepresentation,\n\tgetClosestEulerRepresentation,\n\tisRedundantTwist,\n};\n\n","// https://github.com/toji/gl-matrix/issues/329\nimport { mat4, vec3 } from 'gl-matrix';\nimport { RAD2DEG } from './constants.js';\nimport { smallestDifferenceQuaternion } from './quaternion.js';\n\nconst tempPos = new Float64Array( 3 );\nconst tempQuat = new Float64Array( 4 );\nconst tempPos2 = new Float64Array( 3 );\nconst tempQuat2 = new Float64Array( 4 );\n\n/**\n * Returns an euler angle representation of a quaternion\n * @param {vec3} out Euler angles, pitch-yaw-roll\n * @param {quat} mat Quaternion\n * @return {vec3} out\n */\nexport function getEuler( out, quat ) {\n\n\t// https://math.stackexchange.com/questions/2975109/how-to-convert-euler-angles-to-quaternions-and-get-the-same-euler-angles-back-fr\n\tconst [ x, y, z, w ] = quat;\n\n\tconst t0 = 2.0 * ( w * x + y * z );\n\tconst t1 = 1.0 - 2.0 * ( x * x + y * y );\n\tconst roll = Math.atan2( t0, t1 );\n\n\tlet t2 = 2.0 * ( w * y - z * x );\n\tt2 = t2 > 1.0 ? 1.0 : t2;\n\tt2 = t2 < - 1.0 ? - 1.0 : t2;\n\tconst pitch = Math.asin( t2 );\n\n\tconst t3 = 2.0 * ( w * z + x * y );\n\tconst t4 = 1.0 - 2.0 * ( y * y + z * z );\n\tconst yaw = Math.atan2( t3, t4 );\n\n\tout[ 0 ] = roll * RAD2DEG;\n\tout[ 1 ] = pitch * RAD2DEG;\n\tout[ 2 ] = yaw * RAD2DEG;\n\n\treturn out;\n\n}\n\nexport function getMatrixDifference( a, b, outPos, outQuat ) {\n\n\tmat4.getTranslation( tempPos, a );\n\tmat4.getRotation( tempQuat, a );\n\n\tmat4.getTranslation( tempPos2, b );\n\tmat4.getRotation( tempQuat2, b );\n\n\tvec3.subtract( outPos, tempPos, tempPos2 );\n\tsmallestDifferenceQuaternion( outQuat, tempQuat, tempQuat2 );\n\n\t// error of A - B\n\n}\n","import { mat4, quat } from 'gl-matrix';\nimport { Frame } from './Frame.js';\nimport { getClosestEulerRepresentation, toSmallestEulerValueDistance } from './utils/euler.js';\nimport { getEuler, getMatrixDifference } from './utils/glmatrix.js';\nimport { RAD2DEG, DEG2RAD } from './utils/constants.js';\n\n// degrees of freedom axes\nexport const DOF = {\n\tX: 0,\n\tY: 1,\n\tZ: 2,\n\tEX: 3,\n\tEY: 4,\n\tEZ: 5,\n};\n\nexport const DOF_NAMES = Object.entries( DOF ).sort( ( a, b ) => a[ 1 ] - b[ 1 ] ).map( e => e[ 0 ] );\n\nconst tempInverse = new Float32Array( 16 );\nconst tempMatrix = new Float32Array( 16 );\nconst tempQuat = new Float32Array( 4 );\nconst tempEuler = new Float32Array( 3 );\nconst tempValueEuler = new Float32Array( 3 );\nconst quatEuler = new Float32Array( 3 );\nconst tempDoFValues = new Float32Array( 6 );\n\n// generate a matrix from a set of degrees of freedom\nfunction dofToMatrix( out, dof ) {\n\n\tquat.fromEuler( tempQuat, dof[ DOF.EX ] * RAD2DEG, dof[ DOF.EY ] * RAD2DEG, dof[ DOF.EZ ] * RAD2DEG );\n\tmat4.fromRotationTranslation( out, tempQuat, dof );\n\n}\n\nexport class Joint extends Frame {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis.isJoint = true;\n\n\t\tthis.child = null;\n\t\tthis.isClosure = false;\n\n\t\tthis.trackJointWrap = false;\n\t\tthis.rotationDoFCount = 0;\n\t\tthis.translationDoFCount = 0;\n\n\t\t// TODO: should we make DoF Flags a bit mask flag?\n\t\tthis.dof = [];\n\t\tthis.dofFlags = new Uint8Array( 6 );\n\t\tthis.dofValues = new Float32Array( 6 );\n\t\tthis.dofTarget = new Float32Array( 6 );\n\t\tthis.dofRestPose = new Float32Array( 6 );\n\n\t\tthis.minDoFLimit = new Float32Array( 6 ).fill( - Infinity );\n\t\tthis.maxDoFLimit = new Float32Array( 6 ).fill( Infinity );\n\n\t\tthis.targetSet = false;\n\t\tthis.restPoseSet = false;\n\n\t\tthis.matrixDoFNeedsUpdate = false;\n\t\tthis.matrixDoF = new Float32Array( 16 );\n\t\tmat4.identity( this.matrixDoF );\n\n\t\tthis.cachedIdentityDoFMatrixWorld = new Float32Array( 16 );\n\t\tmat4.identity( this.cachedIdentityDoFMatrixWorld );\n\n\t\t// TODO: Consider affording control over rotation order\n\t\t// TODO: Create pre built joint types\n\n\t}\n\n\t// private helpers\n\t_getQuaternion( target, outQuat ) {\n\n\t\tquat.fromEuler( outQuat, target[ DOF.EX ], target[ DOF.EY ], target[ DOF.EZ ] );\n\n\t}\n\n\t_getEuler( target, outEuler ) {\n\n\t\toutEuler[ 0 ] = target[ DOF.EX ];\n\t\toutEuler[ 1 ] = target[ DOF.EY ];\n\t\toutEuler[ 2 ] = target[ DOF.EZ ];\n\n\t}\n\n\t_getPosition( target, outPos ) {\n\n\t\toutPos[ 0 ] = target[ DOF.X ];\n\t\toutPos[ 1 ] = target[ DOF.Y ];\n\t\toutPos[ 2 ] = target[ DOF.Z ];\n\n\t}\n\n\t_setValue( target, dof, value ) {\n\n\t\tif ( target === this.minDoFLimit || target == this.maxDoFLimit ) {\n\n\t\t\tthrow new Error( 'Joint: Cannot set minDoFLimit or maxDoFLimit with _setValue.' );\n\n\t\t}\n\n\t\tif ( dof < 0 || dof > 6 || typeof dof !== 'number' ) {\n\n\t\t\tthrow new Error( 'Joint: Invalid DoF.' );\n\n\t\t}\n\n\t\tif ( ! this.dofFlags[ dof ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tconst minVal = this.minDoFLimit[ dof ];\n\t\tconst maxVal = this.maxDoFLimit[ dof ];\n\n\t\tif ( value < minVal ) {\n\n\t\t\tvalue = minVal;\n\n\t\t}\n\n\t\tif ( value > maxVal ) {\n\n\t\t\tvalue = maxVal;\n\n\t\t}\n\n\t\ttarget[ dof ] = value;\n\t\treturn value === maxVal || value === minVal;\n\n\t}\n\n\t_setValues( target, values ) {\n\n\t\tconst dof = this.dof;\n\t\tfor ( let i = 0, l = values.length; i < l; i ++ ) {\n\n\t\t\tthis._setValue( target, dof[ i ], values[ i ] );\n\n\t\t}\n\n\t}\n\n\t// TODO: these functions are unused\n\t_setViaFullPosition( target, values ) {\n\n\t\tconst dofFlags = this.dofFlags;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\ttarget[ i ] = dofFlags[ i ] * values[ i ];\n\n\t\t}\n\n\t}\n\n\t_setViaFullEuler( target, values ) {\n\n\t\tconst dofFlags = this.dofFlags;\n\t\tfor ( let i = 3; i < 6; i ++ ) {\n\n\t\t\ttarget[ i ] = dofFlags[ i ] * values[ i - 3 ];\n\n\t\t}\n\n\t\tthis.tryMinimizeEulerAngles();\n\n\t}\n\n\t_setViaQuaternion( target, values ) {\n\n\t\tgetEuler( quatEuler, values );\n\t\tquatEuler[ 0 ] *= DEG2RAD;\n\t\tquatEuler[ 1 ] *= DEG2RAD;\n\t\tquatEuler[ 2 ] *= DEG2RAD;\n\n\t\tif ( this.trackJointWrap ) {\n\n\t\t\t// if we're tracking joint wrap then set this to be as close as possible to\n\t\t\t// the current dof settings.\n\t\t\t// TODO: How should restPose work here? Should it always be the shortest distance?\n\t\t\tconst dofValues = this.dofValues;\n\t\t\ttempEuler[ 0 ] = dofValues[ DOF.EX ];\n\t\t\ttempEuler[ 1 ] = dofValues[ DOF.EY ];\n\t\t\ttempEuler[ 2 ] = dofValues[ DOF.EZ ];\n\t\t\tgetClosestEulerRepresentation( quatEuler, tempEuler, quatEuler );\n\n\t\t}\n\n\t\tthis._setViaFullEuler( target, quatEuler );\n\n\t}\n\n\t// Set the degrees of freedom\n\tclearDoF() {\n\n\t\tthis.setDoF();\n\n\t}\n\n\tsetDoF( ...args ) {\n\n\t\targs.forEach( ( dof, i ) => {\n\n\t\t\tif ( dof < 0 || dof >= 6 ) {\n\n\t\t\t\tthrow new Error( 'Joint: Invalid degree of freedom enum ' + dof + '.' );\n\n\t\t\t}\n\n\t\t\tif ( args.includes( dof, i + 1 ) ) {\n\n\t\t\t\tthrow new Error( 'Joint: Duplicate degree of freedom ' + DOF_NAMES[ dof ] + 'specified.' );\n\n\t\t\t}\n\n\t\t\tif ( i !== 0 && args[ i - 1 ] > dof ) {\n\n\t\t\t\tthrow new Error( 'Joint: Joints degrees of freedom must be specified in position then rotation, XYZ order' );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.dof = args;\n\t\tthis.dofValues.fill( 0 );\n\t\tthis.dofTarget.fill( 0 );\n\t\tthis.dofRestPose.fill( 0 );\n\n\t\tthis.minDoFLimit.fill( - Infinity );\n\t\tthis.maxDoFLimit.fill( Infinity );\n\t\tthis.setMatrixDoFNeedsUpdate();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tthis.dofFlags[ i ] = Number( args.includes( i ) );\n\n\t\t}\n\n\t\tthis.rotationDoFCount =\n\t\t\tthis.dofFlags[ DOF.EX ] +\n\t\t\tthis.dofFlags[ DOF.EY ] +\n\t\t\tthis.dofFlags[ DOF.EZ ];\n\t\tthis.translationDoFCount =\n\t\t\tthis.dofFlags[ DOF.X ] +\n\t\t\tthis.dofFlags[ DOF.Y ] +\n\t\t\tthis.dofFlags[ DOF.Z ];\n\n\t}\n\n\t// Get and set the values of the different degrees of freedom\n\tsetDoFValues( ...values ) {\n\n\t\tthis.setMatrixDoFNeedsUpdate();\n\t\tthis._setValues( this.dofValues, values );\n\n\t}\n\n\tsetDoFValue( dof, value ) {\n\n\t\tthis.setMatrixDoFNeedsUpdate();\n\t\treturn this._setValue( this.dofValues, dof, value );\n\n\t}\n\n\tgetDoFValue( dof ) {\n\n\t\treturn this.dofValues[ dof ];\n\n\t}\n\n\tgetDoFQuaternion( outQuat ) {\n\n\t\tthis._getQuaternion( this.dofValues, outQuat );\n\n\t}\n\n\tgetDoFEuler( outEuler ) {\n\n\t\tthis._getEuler( this.dofValues, outEuler );\n\n\t}\n\n\tgetDoFPosition( outPos ) {\n\n\t\tthis._getPosition( this.dofValues, outPos );\n\n\t}\n\n\t// Get and set the restPose values of the different degrees of freedom\n\tsetRestPoseValues( ...values ) {\n\n\t\tthis._setValues( this.dofRestPose, values );\n\n\t}\n\n\tsetRestPoseValue( dof, value ) {\n\n\t\treturn this._setValue( this.dofRestPose, dof, value );\n\n\t}\n\n\tgetRestPoseValue( dof ) {\n\n\t\treturn this.dofRestPose[ dof ];\n\n\t}\n\n\tgetRestPoseQuaternion( outQuat ) {\n\n\t\tthis._getQuaternion( this.dofRestPose, outQuat );\n\n\t}\n\n\tgetRestPoseEuler( outEuler ) {\n\n\t\tthis._getEuler( this.dofRestPose, outEuler );\n\n\t}\n\n\tgetRestPosePosition( outPos ) {\n\n\t\tthis._getPosition( this.dofRestPose, outPos );\n\n\t}\n\n\t// Get and set the restPose values of the different degrees of freedom\n\tsetTargetValues( ...values ) {\n\n\t\tthis._setValues( this.dofTarget, values );\n\n\t}\n\n\tsetTargetValue( dof, value ) {\n\n\t\tthis._setValue( this.dofTarget, dof, value );\n\n\t}\n\n\tgetTargetValue( dof ) {\n\n\t\treturn this.dofTarget[ dof ];\n\n\t}\n\n\tgetTargetQuaternion( outQuat ) {\n\n\t\tthis._getQuaternion( this.dofTarget, outQuat );\n\n\t}\n\n\tgetTargetEuler( outEuler ) {\n\n\t\tthis._getEuler( this.dofTarget, outEuler );\n\n\t}\n\n\tgetTargetPosition( outPos ) {\n\n\t\tthis._getPosition( this.dofTarget, outPos );\n\n\t}\n\n\t// Joint Limits\n\tsetMinLimits( ...values ) {\n\n\t\tconst { dof } = this;\n\t\tfor ( const i in values ) {\n\n\t\t\tconst d = dof[ i ];\n\t\t\tthis.setMinLimit( d, values[ i ] );\n\n\t\t}\n\n\t}\n\n\tsetMinLimit( dof, value ) {\n\n\t\tthis.minDoFLimit[ dof ] = value;\n\t\tthis.setDoFValue( dof, this.dofValues[ dof ] );\n\n\t}\n\n\tgetMinLimit( dof ) {\n\n\t\treturn this.minDoFLimit[ dof ];\n\n\t}\n\n\tsetMaxLimits( ...values ) {\n\n\t\tconst { dof } = this;\n\t\tfor ( const i in values ) {\n\n\t\t\tconst d = dof[ i ];\n\t\t\tthis.setMaxLimit( d, values[ i ] );\n\n\t\t}\n\n\t}\n\n\tsetMaxLimit( dof, value ) {\n\n\t\tthis.maxDoFLimit[ dof ] = value;\n\t\tthis.setDoFValue( dof, this.dofValues[ dof ] );\n\n\t}\n\n\tgetMaxLimit( dof ) {\n\n\t\treturn this.maxDoFLimit[ dof ];\n\n\t}\n\n\t// Returns the error between this joint and the next link if this is a closure.\n\t// TODO: remove this and put it in solver\n\tgetClosureError( outPos, outQuat ) {\n\n\t\tif ( ! this.isClosure ) {\n\n\t\t\tthrow new Error( 'Joint: Cannot get closure error on non closure Joint.' );\n\n\t\t}\n\n\t\tthis.updateMatrixWorld();\n\t\tthis.child.updateMatrixWorld();\n\n\t\t// error from this position to child\n\t\tgetMatrixDifference( this.matrixWorld, this.child.matrixWorld, outPos, outQuat );\n\n\t}\n\n\t// Update matrix overrides\n\t// TODO: it might be best if we skip this and try to characterize joint error with quats in\n\t// the error vector\n\ttryMinimizeEulerAngles() {\n\n\t\tconst {\n\t\t\ttrackJointWrap,\n\t\t\trotationDoFCount,\n\t\t\tdofRestPose,\n\t\t\tdofTarget,\n\t\t\tdofValues,\n\t\t} = this;\n\n\t\tif ( ! trackJointWrap ) {\n\n\t\t\tif ( rotationDoFCount < 3 ) {\n\n\t\t\t\tfor ( let i = DOF.EX; i <= DOF.EZ; i ++ ) {\n\n\t\t\t\t\tdofTarget[ i ] = toSmallestEulerValueDistance( dofValues[ i ], dofTarget[ i ] );\n\t\t\t\t\tdofRestPose[ i ] = toSmallestEulerValueDistance( dofValues[ i ], dofRestPose[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttempValueEuler[ 0 ] = dofValues[ DOF.EX ];\n\t\t\t\ttempValueEuler[ 1 ] = dofValues[ DOF.EY ];\n\t\t\t\ttempValueEuler[ 2 ] = dofValues[ DOF.EZ ];\n\n\t\t\t\t// update target\n\t\t\t\ttempEuler[ 0 ] = dofTarget[ DOF.EX ];\n\t\t\t\ttempEuler[ 1 ] = dofTarget[ DOF.EY ];\n\t\t\t\ttempEuler[ 2 ] = dofTarget[ DOF.EZ ];\n\n\t\t\t\tgetClosestEulerRepresentation( tempEuler, tempValueEuler, tempEuler );\n\n\t\t\t\tdofTarget[ DOF.EX ] = tempEuler[ 0 ];\n\t\t\t\tdofTarget[ DOF.EY ] = tempEuler[ 1 ];\n\t\t\t\tdofTarget[ DOF.EZ ] = tempEuler[ 2 ];\n\n\t\t\t\t// update restPose\n\t\t\t\ttempEuler[ 0 ] = dofRestPose[ DOF.EX ];\n\t\t\t\ttempEuler[ 1 ] = dofRestPose[ DOF.EY ];\n\t\t\t\ttempEuler[ 2 ] = dofRestPose[ DOF.EZ ];\n\n\t\t\t\tgetClosestEulerRepresentation( tempEuler, tempValueEuler, tempEuler );\n\n\t\t\t\tdofRestPose[ DOF.EX ] = tempEuler[ 0 ];\n\t\t\t\tdofRestPose[ DOF.EY ] = tempEuler[ 1 ];\n\t\t\t\tdofRestPose[ DOF.EZ ] = tempEuler[ 2 ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetDeltaWorldMatrix( dof, delta, outMatrix ) {\n\n\t\tconst {\n\t\t\tdofValues,\n\t\t\tminDoFLimit,\n\t\t\tmaxDoFLimit,\n\t\t\tcachedIdentityDoFMatrixWorld,\n\t\t} = this;\n\n\t\tthis.updateMatrixWorld();\n\n\t\t// copy out set of dof values\n\t\ttempDoFValues.set( dofValues );\n\n\t\t// get the state\n\t\tconst min = minDoFLimit[ dof ];\n\t\tconst max = maxDoFLimit[ dof ];\n\t\tconst currVal = tempDoFValues[ dof ];\n\n\t\t// check what our slack is\n\t\tconst minSlack = currVal - min;\n\t\tconst maxSlack = max - currVal;\n\n\t\t// If we're constrained by either limit then move in the other direction then\n\t\t// use the direction with the most slack.\n\t\tlet newVal = currVal + delta;\n\t\tconst isMaxConstrained = delta > 0 && newVal > max;\n\t\tconst isMinConstrained = delta < 0 && newVal < min;\n\t\tconst doInvert = ( isMaxConstrained && minSlack > maxSlack ) || ( isMinConstrained && maxSlack > minSlack );\n\t\tif ( doInvert ) {\n\n\t\t\tnewVal = currVal - delta;\n\n\t\t}\n\n\t\t// update our dof array and compute the matrix\n\t\ttempDoFValues[ dof ] = newVal;\n\n\t\tdofToMatrix( tempMatrix, tempDoFValues );\n\n\t\tmat4.multiply( outMatrix, cachedIdentityDoFMatrixWorld, tempMatrix );\n\n\t\treturn doInvert;\n\n\t}\n\n\t// matrix updates\n\tsetMatrixDoFNeedsUpdate() {\n\n\t\tif ( this.matrixDoFNeedsUpdate === false ) {\n\n\t\t\tthis.matrixDoFNeedsUpdate = true;\n\t\t\tthis.setMatrixWorldNeedsUpdate();\n\n\t\t}\n\n\t}\n\n\tupdateDoFMatrix() {\n\n\t\tif ( this.matrixDoFNeedsUpdate ) {\n\n\t\t\tdofToMatrix( this.matrixDoF, this.dofValues );\n\t\t\tthis.matrixDoFNeedsUpdate = false;\n\n\n\t\t}\n\n\t}\n\n\tcomputeMatrixWorld() {\n\n\t\tconst {\n\t\t\tparent,\n\t\t\tmatrixWorld,\n\t\t\tmatrix,\n\t\t\tmatrixDoF,\n\t\t\tcachedIdentityDoFMatrixWorld\n\t\t} = this;\n\n\t\tthis.updateDoFMatrix();\n\n\t\tmat4.multiply( matrixWorld, matrix, matrixDoF );\n\t\tif ( parent ) {\n\n\t\t\tmat4.multiply( matrixWorld, parent.matrixWorld, matrixWorld );\n\t\t\tmat4.multiply( cachedIdentityDoFMatrixWorld, parent.matrixWorld, matrix );\n\n\t\t} else {\n\n\t\t\tmat4.copy( cachedIdentityDoFMatrixWorld, matrix );\n\n\t\t}\n\n\n\n\t}\n\n\t// Add child overrides\n\tmakeClosure( child ) {\n\n\t\tif ( ! child.isLink || this.child || child.parent === this ) {\n\n\t\t\tthrow new Error( 'Joint: Given child cannot be used to make closure.' );\n\n\t\t} else {\n\n\t\t\t// don't store the closure child in the children array to avoid\n\t\t\t// implicit traversal.\n\t\t\tthis.child = child;\n\t\t\tthis.isClosure = true;\n\t\t\tchild.closureJoints.push( this );\n\n\t\t}\n\n\t}\n\n\taddChild( child ) {\n\n\t\tif ( ! child.isLink || this.child || child.parent === this ) {\n\n\t\t\tthrow new Error( 'Joint: Given child cannot be added to Joint.' );\n\n\t\t} else {\n\n\t\t\tsuper.addChild( child );\n\t\t\tthis.child = child;\n\t\t\tthis.isClosure = false;\n\n\t\t}\n\n\t}\n\n\tremoveChild( child ) {\n\n\t\tif ( this.isClosure ) {\n\n\t\t\tif ( this.child !== child ) {\n\n\t\t\t\tthrow new Error( 'Frame: Child to be removed is not a child of this Joint.' );\n\n\t\t\t} else {\n\n\t\t\t\tthis.child = null;\n\t\t\t\tthis.isClosure = false;\n\n\t\t\t\tconst index = child.closureJoints.indexOf( this );\n\t\t\t\tchild.closureJoints.splice( index, 1 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tsuper.removeChild( child );\n\n\t\t}\n\n\t}\n\n\tattachChild( child ) {\n\n\t\tsuper.attachChild( child );\n\n\t\t// remove the dof rotation afterward\n\t\tmat4.invert( tempInverse, this.matrixDoF );\n\t\tmat4.multiply( child.matrix, tempInverse, child.matrix );\n\t\tmat4.getTranslation( child.position, child.matrix );\n\t\tmat4.getRotation( child.quaternion, child.matrix );\n\n\t}\n\n\tdetachChild( child ) {\n\n\t\tsuper.detachChild( child );\n\n\t\t// remove the dof rotation afterward\n\t\tmat4.invert( tempInverse, this.matrixDoF );\n\t\tmat4.multiply( child.matrix, tempInverse, child.matrix );\n\t\tmat4.getTranslation( child.position, child.matrix );\n\t\tmat4.getRotation( child.quaternion, child.matrix );\n\n\t}\n\n}\n","import { vec3, vec4 } from 'gl-matrix';\nimport { DOF } from '../Joint.js';\n\nconst tempPos = new Float64Array( 3 );\nconst tempQuat = new Float64Array( 4 );\nconst tempEuler = new Float64Array( 3 );\nexport function accumulateClosureError(\n\tsolver,\n\tjoint,\n\tstartIndex,\n\terrorVector = null,\n\tresult = { isConverged: false, rowCount: 7, totalError: 0 }\n) {\n\n\tconst {\n\t\ttranslationConvergeThreshold,\n\t\trotationConvergeThreshold,\n\t\ttranslationErrorClamp,\n\t\trotationErrorClamp,\n\t\ttranslationFactor,\n\t\trotationFactor,\n\t} = solver;\n\n\tconst {\n\t\ttranslationDoFCount,\n\t\trotationDoFCount,\n\t\tdofFlags,\n\t\tdof,\n\t} = joint;\n\n\t// Get the error from child towards the closure target\n\tjoint.getClosureError( tempPos, tempQuat );\n\n\tlet rowCount = 7;\n\tif ( joint.isGoal ) {\n\n\t\ttempPos[ 0 ] *= dofFlags[ 0 ];\n\t\ttempPos[ 1 ] *= dofFlags[ 1 ];\n\t\ttempPos[ 2 ] *= dofFlags[ 2 ];\n\t\trowCount = translationDoFCount;\n\n\t\tif ( rotationDoFCount === 0 ) {\n\n\t\t\ttempQuat[ 0 ] = 0;\n\t\t\ttempQuat[ 1 ] = 0;\n\t\t\ttempQuat[ 2 ] = 0;\n\t\t\ttempQuat[ 3 ] = 0;\n\n\t\t} else {\n\n\t\t\trowCount += 4;\n\n\t\t}\n\n\t}\n\n\tlet isConverged = false;\n\tlet totalError = 0;\n\tconst posMag = vec3.length( tempPos );\n\tconst rotMag = vec4.length( tempQuat );\n\tif (\n\t\tposMag < translationConvergeThreshold &&\n\t\trotMag < rotationConvergeThreshold\n\t) {\n\n\t\tisConverged = true;\n\n\t}\n\n\ttotalError += posMag + rotMag;\n\n\tif ( errorVector ) {\n\n\t\tif ( posMag > translationErrorClamp ) {\n\n\t\t\tvec3.scale( tempPos, tempPos, translationErrorClamp / posMag );\n\n\t\t}\n\n\t\tvec4.scale( tempPos, tempPos, translationFactor );\n\n\t\tif ( rotMag > rotationErrorClamp ) {\n\n\t\t\tvec4.scale( tempQuat, tempQuat, rotationErrorClamp / rotMag );\n\n\t\t}\n\n\t\tvec4.scale( tempQuat, tempQuat, rotationFactor );\n\n\t\tif ( joint.isGoal ) {\n\n\t\t\tfor ( let i = 0; i < translationDoFCount; i ++ ) {\n\n\t\t\t\tconst d = dof[ i ];\n\t\t\t\terrorVector[ startIndex + i ][ 0 ] = tempPos[ d ];\n\n\t\t\t}\n\n\t\t\tif ( joint.rotationDoFCount === 3 ) {\n\n\t\t\t\terrorVector[ startIndex + translationDoFCount + 0 ][ 0 ] = tempQuat[ 0 ];\n\t\t\t\terrorVector[ startIndex + translationDoFCount + 1 ][ 0 ] = tempQuat[ 1 ];\n\t\t\t\terrorVector[ startIndex + translationDoFCount + 2 ][ 0 ] = tempQuat[ 2 ];\n\t\t\t\terrorVector[ startIndex + translationDoFCount + 3 ][ 0 ] = tempQuat[ 3 ];\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\terrorVector[ startIndex + 0 ][ 0 ] = tempPos[ 0 ];\n\t\t\terrorVector[ startIndex + 1 ][ 0 ] = tempPos[ 1 ];\n\t\t\terrorVector[ startIndex + 2 ][ 0 ] = tempPos[ 2 ];\n\n\t\t\terrorVector[ startIndex + 3 ][ 0 ] = tempQuat[ 0 ];\n\t\t\terrorVector[ startIndex + 4 ][ 0 ] = tempQuat[ 1 ];\n\t\t\terrorVector[ startIndex + 5 ][ 0 ] = tempQuat[ 2 ];\n\t\t\terrorVector[ startIndex + 6 ][ 0 ] = tempQuat[ 3 ];\n\n\t\t}\n\n\t}\n\n\tresult.totalError = totalError;\n\tresult.isConverged = isConverged;\n\tresult.rowCount = rowCount;\n\treturn result;\n\n}\n\nexport function accumulateTargetError(\n\tsolver,\n\tjoint,\n\tstartIndex,\n\terrorVector = null,\n\tresult = { isConverged: false, rowCount: 7, totalError: 0 }\n) {\n\n\t// Find whether or not the target has converged or not\n\tconst {\n\t\ttranslationConvergeThreshold,\n\t\trotationConvergeThreshold,\n\t\tlockedJointDoFCount,\n\t\ttranslationErrorClamp,\n\t\trotationErrorClamp,\n\t\tlockedJointDoF,\n\t} = solver;\n\n\tconst {\n\t\tdofTarget,\n\t\tdofValues,\n\t\ttranslationDoFCount,\n\t\trotationDoFCount,\n\t\ttranslationFactor,\n\t\trotationFactor,\n\t\tdofList,\n\t} = joint;\n\n\t// get the position delta\n\tconst posDelta = vec3.distance( dofValues, dofTarget );\n\n\t// TODO: if three euler angles are being used we should set this to a quaternion to measure\n\t// error rather than euler angles. We should instead just always use quaternions for targets\n\t// for now.\n\t// Before running this solver we try to ensure the target and restPose are minimized\n\tlet rotDelta =\n\t\tdofTarget[ DOF.EX ] - dofValues[ DOF.EX ] +\n\t\tdofTarget[ DOF.EY ] - dofValues[ DOF.EY ] +\n\t\tdofTarget[ DOF.EZ ] - dofValues[ DOF.EZ ];\n\n\t// Get the row count\n\tconst lockedDoFCount = lockedJointDoFCount.get( joint ) || 0;\n\tresult.rowCount = translationDoFCount + rotationDoFCount - lockedDoFCount;\n\tresult.isConverged = posDelta < translationConvergeThreshold && rotDelta < rotationConvergeThreshold;\n\tresult.totalError = posDelta + rotDelta;\n\n\tif ( errorVector ) {\n\n\t\tconst lockedDoF = lockedJointDoF.get( joint );\n\t\tconst isLocked = lockedDoFCount !== 0;\n\n\t\tlet rowIndex = 0;\n\n\t\t// error from current state to target\n\t\ttempPos[ 0 ] = dofTarget[ 0 ] - dofValues[ 0 ];\n\t\ttempPos[ 1 ] = dofTarget[ 1 ] - dofValues[ 1 ];\n\t\ttempPos[ 2 ] = dofTarget[ 2 ] - dofValues[ 2 ];\n\n\t\t// clamp the position delta to the max error step\n\t\tconst posMag = vec3.length( tempPos );\n\t\tvec3.scale( tempPos, tempPos, translationFactor * translationErrorClamp / posMag );\n\t\tfor ( let i = 0, l = translationDoFCount; i < l; i ++ ) {\n\n\t\t\tconst dof = dofList[ i ];\n\n\t\t\t// skip this degree of freedom if it's locked\n\t\t\tif ( isLocked && lockedDoF[ dof ] ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\terrorVector[ startIndex + rowIndex ][ 0 ] = tempPos[ dof ];\n\t\t\trowIndex ++;\n\n\t\t}\n\n\t\t// get the euler differences\n\t\t// before running this solver we minimize the euler targets\n\t\ttempEuler[ 0 ] = joint.dofTarget[ 3 ] - joint.dofValues[ 3 ];\n\t\ttempEuler[ 1 ] = joint.dofTarget[ 4 ] - joint.dofValues[ 4 ];\n\t\ttempEuler[ 2 ] = joint.dofTarget[ 5 ] - joint.dofValues[ 5 ];\n\n\t\t// clamp the euler difference to the error step magnitude\n\t\tconst eulerMag = vec3.length( tempEuler );\n\t\tvec3.scale( tempEuler, tempEuler, rotationFactor * rotationErrorClamp / eulerMag );\n\t\tfor ( let i = translationDoFCount, l = translationDoFCount + rotationDoFCount; i < l; i ++ ) {\n\n\t\t\tconst dof = dofList[ i ];\n\n\t\t\t// skip this degree of freedom if it's locked\n\t\t\tif ( isLocked && lockedDoF[ dof ] ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\terrorVector[ startIndex + rowIndex ][ 0 ] = tempEuler[ dof ];\n\t\t\trowIndex ++;\n\n\t\t}\n\n\t}\n\n}\n","/**\n * Gauss-Jordan elimination\n */\n\nvar linear = (function(){\n/**\n * Used internally to solve systems\n * If you want to solve A.x = B,\n * choose data=A and mirror=B.\n * mirror can be either an array representing a vector\n * or an array of arrays representing a matrix.\n */\nfunction Mat(data, mirror) {\n  // Clone the original matrix\n  this.data = new Array(data.length);\n  for (var i=0, cols=data[0].length; i<data.length; i++) {\n    this.data[i] = new Array(cols);\n    for(var j=0; j<cols; j++) {\n      this.data[i][j] = data[i][j];\n    }\n  }\n\n  if (mirror) {\n    if (typeof mirror[0] !== \"object\") {\n      for (var i=0; i<mirror.length; i++) {\n        mirror[i] = [mirror[i]];\n      }\n    }\n    this.mirror = new Mat(mirror);\n  }\n}\n\n/**\n * Swap lines i and j in the matrix\n */\nMat.prototype.swap = function (i, j) {\n  if (this.mirror) this.mirror.swap(i,j);\n  var tmp = this.data[i];\n  this.data[i] = this.data[j];\n  this.data[j] = tmp;\n}\n\n/**\n * Multiply line number i by l\n */\nMat.prototype.multline = function (i, l) {\n  if (this.mirror) this.mirror.multline(i,l);\n  var line = this.data[i];\n  for (var k=line.length-1; k>=0; k--) {\n    line[k] *= l;\n  }\n}\n\n/**\n * Add line number j multiplied by l to line number i\n */\nMat.prototype.addmul = function (i, j, l) {\n  if (this.mirror) this.mirror.addmul(i,j,l);\n  var lineI = this.data[i], lineJ = this.data[j];\n  for (var k=lineI.length-1; k>=0; k--) {\n    lineI[k] = lineI[k] + l*lineJ[k];\n  }\n}\n\n/**\n * Tests if line number i is composed only of zeroes\n */\nMat.prototype.hasNullLine = function (i) {\n  for (var j=0; j<this.data[i].length; j++) {\n    if (this.data[i][j] !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nMat.prototype.gauss = function() {\n  var pivot = 0,\n      lines = this.data.length,\n      columns = this.data[0].length,\n      nullLines = [];\n\n  for (var j=0; j<columns; j++) {\n    // Find the line on which there is the maximum value of column j\n    var maxValue = 0, maxLine = 0;\n    for (var k=pivot; k<lines; k++) {\n      var val = this.data[k][j];\n      if (Math.abs(val) > Math.abs(maxValue)) {\n        maxLine = k;\n        maxValue = val;\n      } \n    }\n    if (maxValue === 0) {\n      // The matrix is not invertible. The system may still have solutions.\n      nullLines.push(pivot);\n    } else {\n      // The value of the pivot is maxValue\n      this.multline(maxLine, 1/maxValue);\n      this.swap(maxLine, pivot);\n      for (var i=0; i<lines; i++) {\n        if (i !== pivot) {\n          this.addmul(i, pivot, -this.data[i][j]);\n        }\n      }\n    }\n    pivot++;\n  }\n\n  // Check that the system has null lines where it should\n  for (var i=0; i<nullLines.length; i++) {\n    if (!this.mirror.hasNullLine(nullLines[i])) {\n      throw new Error(\"singular matrix\");\n    }\n  }\n  return this.mirror.data;\n}\n\n/**\n * Solves A.x = b\n * @param A\n * @param b\n * @return x\n */\nexports.solve = function solve(A, b) {\n  var result = new Mat(A,b).gauss();\n  if (result.length > 0 && result[0].length === 1) {\n    // Convert Nx1 matrices to simple javascript arrays\n    for (var i=0; i<result.length; i++) result[i] = result[i][0];\n  }\n  return result;\n}\n\nfunction identity(n) {\n  var id = new Array(n);\n  for (var i=0; i<n; i++) {\n    id[i] = new Array(n);\n    for (var j=0; j<n; j++) {\n      id[i][j] = (i === j) ? 1 : 0;\n    }\n  }\n  return id;\n}\n\n/**\n * invert a matrix\n */\nexports.invert = function invert(A) {\n  return new Mat(A, identity(A.length)).gauss();\n}\n\nreturn exports;\n})();\n\nif (typeof module.exports === \"object\") module.exports = linear;\n","!function(r,f){\"object\"==typeof exports&&\"undefined\"!=typeof module?f(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],f):f((r=\"undefined\"!=typeof globalThis?globalThis:r||self).SVDJS={})}(this,function(r){\"use strict\";r.SVD=function(r,f,o,e,t){if(f=void 0===f||f,o=void 0===o||o,t=1e-64/(e=e||Math.pow(2,-52)),!r)throw new TypeError(\"Matrix a is not defined\");var i,a,n,s,h,l,M,d,p,b,u,w,y=r[0].length,q=r.length;if(q<y)throw new TypeError(\"Invalid matrix: m < n\");for(var v=[],c=[],x=[],g=\"f\"===f?q:y,m=b=M=0;m<q;m++)c[m]=new Array(g).fill(0);for(m=0;m<y;m++)x[m]=new Array(y).fill(0);var S,T=new Array(y).fill(0);for(m=0;m<q;m++)for(i=0;i<y;i++)c[m][i]=r[m][i];for(m=0;m<y;m++){for(v[m]=M,p=0,n=m+1,i=m;i<q;i++)p+=Math.pow(c[i][m],2);if(p<t)M=0;else for(d=(l=c[m][m])*(M=l<0?Math.sqrt(p):-Math.sqrt(p))-p,c[m][m]=l-M,i=n;i<y;i++){for(p=0,a=m;a<q;a++)p+=c[a][m]*c[a][i];for(l=p/d,a=m;a<q;a++)c[a][i]=c[a][i]+l*c[a][m]}for(T[m]=M,p=0,i=n;i<y;i++)p+=Math.pow(c[m][i],2);if(p<t)M=0;else{for(d=(l=c[m][m+1])*(M=l<0?Math.sqrt(p):-Math.sqrt(p))-p,c[m][m+1]=l-M,i=n;i<y;i++)v[i]=c[m][i]/d;for(i=n;i<q;i++){for(p=0,a=n;a<y;a++)p+=c[i][a]*c[m][a];for(a=n;a<y;a++)c[i][a]=c[i][a]+p*v[a]}}b<(u=Math.abs(T[m])+Math.abs(v[m]))&&(b=u)}if(o)for(m=y-1;0<=m;m--){if(0!==M){for(d=c[m][m+1]*M,i=n;i<y;i++)x[i][m]=c[m][i]/d;for(i=n;i<y;i++){for(p=0,a=n;a<y;a++)p+=c[m][a]*x[a][i];for(a=n;a<y;a++)x[a][i]=x[a][i]+p*x[a][m]}}for(i=n;i<y;i++)x[m][i]=0,x[i][m]=0;x[m][m]=1,M=v[m],n=m}if(f){if(\"f\"===f)for(m=y;m<q;m++){for(i=y;i<q;i++)c[m][i]=0;c[m][m]=1}for(m=y-1;0<=m;m--){for(n=m+1,M=T[m],i=n;i<g;i++)c[m][i]=0;if(0!==M){for(d=c[m][m]*M,i=n;i<g;i++){for(p=0,a=n;a<q;a++)p+=c[a][m]*c[a][i];for(l=p/d,a=m;a<q;a++)c[a][i]=c[a][i]+l*c[a][m]}for(i=m;i<q;i++)c[i][m]=c[i][m]/M}else for(i=m;i<q;i++)c[i][m]=0;c[m][m]=c[m][m]+1}}for(e*=b,a=y-1;0<=a;a--)for(var k=0;k<50;k++){for(S=!1,n=a;0<=n;n--){if(Math.abs(v[n])<=e){S=!0;break}if(Math.abs(T[n-1])<=e)break}if(!S)for(h=0,s=n-(p=1),m=n;m<a+1&&(l=p*v[m],v[m]=h*v[m],!(Math.abs(l)<=e));m++)if(M=T[m],T[m]=Math.sqrt(l*l+M*M),h=M/(d=T[m]),p=-l/d,f)for(i=0;i<q;i++)u=c[i][s],w=c[i][m],c[i][s]=u*h+w*p,c[i][m]=-u*p+w*h;if(w=T[a],n===a){if(w<0&&(T[a]=-w,o))for(i=0;i<y;i++)x[i][a]=-x[i][a];break}for(b=T[n],l=(((u=T[a-1])-w)*(u+w)+((M=v[a-1])-(d=v[a]))*(M+d))/(2*d*u),M=Math.sqrt(l*l+1),l=((b-w)*(b+w)+d*(u/(l<0?l-M:l+M)-d))/b,m=n+(p=h=1);m<a+1;m++){if(M=v[m],u=T[m],d=p*M,M*=h,w=Math.sqrt(l*l+d*d),l=b*(h=l/(v[m-1]=w))+M*(p=d/w),M=-b*p+M*h,d=u*p,u*=h,o)for(i=0;i<y;i++)b=x[i][m-1],w=x[i][m],x[i][m-1]=b*h+w*p,x[i][m]=-b*p+w*h;if(w=Math.sqrt(l*l+d*d),l=(h=l/(T[m-1]=w))*M+(p=d/w)*u,b=-p*M+h*u,f)for(i=0;i<q;i++)u=c[i][m-1],w=c[i][m],c[i][m-1]=u*h+w*p,c[i][m]=-u*p+w*h}v[n]=0,v[a]=l,T[a]=b}for(m=0;m<y;m++)T[m]<e&&(T[m]=0);return{u:c,q:T,v:x}},r.VERSION=\"1.1.1\",Object.defineProperty(r,\"__esModule\",{value:!0})});\n","import linearSolve from 'linear-solve';\nimport { SVD } from 'svd-js';\n\nfunction transpose( outMatrix, a ) {\n\n\tconst tr = a.length;\n\tconst tc = a[ 0 ].length;\n\n\tfor ( let r = 0; r < tr; r ++ ) {\n\n\t\tfor ( let c = 0; c < tc; c ++ ) {\n\n\t\t\toutMatrix[ c ][ r ] = a[ r ][ c ];\n\n\t\t}\n\n\t}\n\n}\n\nfunction identity( outMatrix ) {\n\n\tfor ( let r = 0, tr = outMatrix.length; r < tr; r ++ ) {\n\n\t\tfor ( let c = 0, tc = outMatrix.length; c < tc; c ++ ) {\n\n\t\t\toutMatrix[ r ][ c ] = r === c ? 1 : 0;\n\n\t\t}\n\n\t}\n\n}\n\nfunction scale( outMatrix, matrix, scalar ) {\n\n\tfor ( let r = 0, tr = outMatrix.length; r < tr; r ++ ) {\n\n\t\tfor ( let c = 0, tc = outMatrix.length; c < tc; c ++ ) {\n\n\t\t\toutMatrix[ r ][ c ] = matrix[ r ][ c ] * scalar;\n\n\t\t}\n\n\t}\n\n}\n\nfunction multiply( outMatrix, a, b ) {\n\n\tif ( a === outMatrix || b === outMatrix ) {\n\n\t\tthrow new Error( 'Matrix: Cannot multiply to a matrix in place.' );\n\n\t}\n\n\t// a is m x n\n\t// b is n x k\n\t// outMatrix is m x k\n\n\t// m = a rows\n\t// n = a cols or b rows\n\t// k = b cols\n\n\tconst m = a.length;\n\tconst n = b.length;\n\tconst k = b[ 0 ].length;\n\n\t// iterate over m\n\tfor ( let r = 0, tr = m; r < tr; r ++ ) {\n\n\t\t// iterate over k\n\t\tfor ( let c = 0, tc = k; c < tc; c ++ ) {\n\n\t\t\tlet sum = 0;\n\n\t\t\t// iterate over n\n\t\t\tfor ( let i = 0, ti = n; i < ti; i ++ ) {\n\n\t\t\t\tsum += a[ r ][ i ] * b[ i ][ c ];\n\n\t\t\t}\n\n\t\t\toutMatrix[ r ][ c ] = sum;\n\n\t\t}\n\n\t}\n\n}\n\nfunction create( row, col ) {\n\n\tconst result = new Array( row );\n\tfor ( let i = 0; i < row; i ++ ) {\n\n\t\tresult[ i ] = new Float64Array( col );\n\n\t}\n\n\treturn result;\n\n}\n\nfunction copy( outMatrix, sourceMatrix ) {\n\n\tconst tr = sourceMatrix.length;\n\tconst tc = sourceMatrix[ 0 ].length;\n\tfor ( let r = 0; r < tr; r ++ ) {\n\n\t\tfor ( let c = 0; c < tc; c ++ ) {\n\n\t\t\toutMatrix[ r ][ c ] = sourceMatrix[ r ][ c ];\n\n\t\t}\n\n\t}\n\n}\n\nfunction clone( matrix ) {\n\n\tconst rows = matrix.length;\n\tconst cols = matrix[ 0 ].length;\n\tconst resultMatrix = create( rows, cols );\n\tcopy( resultMatrix, matrix );\n\treturn resultMatrix;\n\n}\n\nfunction solve( outMatrix, matrix, vector ) {\n\n\tconst res = linearSolve.solve( matrix, vector );\n\tfor ( let i = 0, l = res.length; i < l; i ++ ) {\n\n\t\toutMatrix[ i ].set( res[ i ] );\n\n\t}\n\n}\n\nfunction svd( ru, rq, rv, matrix ) {\n\n\tconst { u, v, q } = SVD( matrix );\n\n\tconst urows = u.length;\n\tfor ( let r = 0; r < urows; r ++ ) {\n\n\t\tru[ r ].set( u[ r ] );\n\n\t}\n\n\tconst vrows = v.length;\n\tfor ( let r = 0; r < vrows; r ++ ) {\n\n\t\trv[ r ].set( v[ r ] );\n\n\t}\n\n\tconst qrows = q.length;\n\tfor ( let r = 0; r < qrows; r ++ ) {\n\n\t\tconst rqrow = rq[ r ];\n\t\tconst qval = q[ r ];\n\t\trqrow.fill( 0 );\n\t\trqrow[ r ] = qval;\n\n\t}\n\n}\n\nfunction invert( outMatrix, matrix ) {\n\n\tconst res = linearSolve.invert( matrix );\n\n\tconst tr = matrix[ 0 ].length;\n\tconst tc = matrix.length;\n\tfor ( let r = 0; r < tr; r ++ ) {\n\n\t\tfor ( let c = 0; c < tc; c ++ ) {\n\n\t\t\toutMatrix[ r ][ c ] = res[ r ][ c ];\n\n\t\t}\n\n\t}\n\n}\n\nfunction add( outMatrix, a, b ) {\n\n\tconst tr = a.length;\n\tconst tc = a[ 0 ].length;\n\tfor ( let r = 0; r < tr; r ++ ) {\n\n\t\tfor ( let c = 0; c < tc; c ++ ) {\n\n\t\t\toutMatrix[ r ][ c ] = a[ r ][ c ] + b[ r ][ c ];\n\n\t\t}\n\n\t}\n\n}\n\nfunction subtract( outMatrix, a, b ) {\n\n\tconst tr = a.length;\n\tconst tc = a[ 0 ].length;\n\tfor ( let r = 0; r < tr; r ++ ) {\n\n\t\tfor ( let c = 0; c < tc; c ++ ) {\n\n\t\t\toutMatrix[ r ][ c ] = a[ r ][ c ] - b[ r ][ c ];\n\n\t\t}\n\n\t}\n\n}\n\nfunction magnitudeSquared( matrix ) {\n\n\tlet sum = 0;\n\tconst rows = matrix.length;\n\tconst cols = matrix[ 0 ].length;\n\tfor ( let r = 0; r < rows; r ++ ) {\n\n\t\tfor ( let c = 0; c < cols; c ++ ) {\n\n\t\t\tsum += matrix[ r ][ c ] ** 2;\n\n\t\t}\n\n\t}\n\n\treturn sum;\n\n}\n\nfunction magnitude( matrix ) {\n\n\treturn Math.sqrt( magnitudeSquared( matrix ) );\n\n}\n\nfunction toString( matrix, dec = 3 ) {\n\n\tconst rows = matrix.length;\n\tconst cols = matrix[ 0 ].length;\n\tlet str = '';\n\tfor ( let r = 0; r < rows; r ++ ) {\n\n\t\tfor ( let c = 0; c < cols; c ++ ) {\n\n\t\t\tstr += matrix[ r ][ c ].toFixed( dec ) + ', ';\n\n\t\t}\n\n\t\tstr += '\\n';\n\n\t}\n\n\treturn str;\n\n}\n\nfunction log( matrix, dec ) {\n\n\tconsole.log( toString( matrix, dec ) );\n\n}\n\nexport const mat = {\n\ttranspose,\n\tidentity,\n\tscale,\n\tmultiply,\n\tcreate,\n\tcopy,\n\tclone,\n\tsolve,\n\tsvd,\n\tinvert,\n\tadd,\n\tsubtract,\n\tmagnitudeSquared,\n\tmagnitude,\n\ttoString,\n\tlog,\n};\n","import { vec3, vec4, mat4 } from 'gl-matrix';\nimport { accumulateClosureError, accumulateTargetError } from './utils/solver.js';\nimport { mat } from './utils/matrix.js';\nimport { getMatrixDifference } from './utils/glmatrix.js';\n\n// temp reusable variables\nconst targetRelativeToJointMatrix = new Float64Array( 16 );\nconst targetDeltaWorldMatrix = new Float64Array( 16 );\nconst tempDeltaWorldMatrix = new Float64Array( 16 );\nconst tempInverseMatrixWorld = new Float64Array( 16 );\nconst tempQuat = new Float64Array( 4 );\nconst tempPos = new Float64Array( 3 );\nconst tempQuat2 = new Float64Array( 4 );\nconst tempPos2 = new Float64Array( 3 );\n\nconst targetJoints = [];\nconst freeJoints = [];\nconst errorResultInfo = {\n\trowCount: 0,\n\tisConverged: false,\n\ttotalError: 0,\n};\nconst dofResultInfo = {\n\terrorRows: 0,\n\tfreeDoF: 0,\n\ttotalError: 0,\n};\n\nexport const SOLVE_STATUS = {\n\n\tCONVERGED: 0,\n\tSTALLED: 1,\n\tDIVERGED: 2,\n\tTIMEOUT: 3,\n\n};\n\nexport const SOLVE_STATUS_NAMES = Object.entries( SOLVE_STATUS ).sort( ( a, b ) => a[ 1 ] - b[ 1 ] ).map( el => el[ 0 ] );\n\nexport class ChainSolver {\n\n\tconstructor( chain ) {\n\n\t\tthis.chain = Array.from( chain );\n\n\t\t// list of targets we're trying to minimize in the chain\n\t\tthis.targets = null;\n\n\t\t// map of joint -> closures that the given joint affects\n\t\tthis.affectedClosures = null;\n\n\t\t// map of joint -> closure children that the given joint affects\n\t\tthis.affectedConnectedClosures = null;\n\n\t\t// map of joint -> that stores the amount of DoF that are locked after\n\t\t// hitting a joint limit.\n\t\t// Undefined or 0 if none are locked\n\t\tthis.lockedJointDoFCount = null;\n\n\t\t// map of joint -> list of locked DoF\n\t\tthis.lockedJointDoF = null;\n\n\t\t// map of joint -> previous joint angles for resetting joint angles on\n\t\t// divergence check.\n\t\tthis.prevDoFValues = null;\n\n\t\t// options -- these are set by the containing Solver.\n\t\tthis.maxIterations = - 1;\n\n\t\tthis.matrixPool = null;\n\n\t\tthis.useSVD = false;\n\n\t\tthis.translationConvergeThreshold = - 1;\n\t\tthis.rotationConvergeThreshold = - 1;\n\n\t\tthis.translationFactor = - 1;\n\t\tthis.rotationFactor = - 1;\n\n\t\tthis.translationStep = - 1;\n\t\tthis.rotationStep = - 1;\n\n\t\tthis.translationErrorClamp = - 1;\n\t\tthis.rotationErrorClamp = - 1;\n\n\t\tthis.stallThreshold = - 1;\n\t\tthis.dampingFactor = - 1;\n\t\tthis.divergeThreshold = - 1;\n\t\tthis.restPoseFactor = - 1;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\t// Find all joints with targets.\n\t\tconst chain = this.chain;\n\t\tconst targets = chain.filter( j => j.targetSet || j.isClosure );\n\n\t\tconst lockedJointDoF = new Map();\n\t\tconst lockedJointDoFCount = new Map();\n\t\tconst prevDoFValues = new Map();\n\n\t\tconst affectedClosures = new Map();\n\t\tconst affectedConnectedClosures = new Map();\n\t\tchain.forEach( j => {\n\n\t\t\t// Track which joints will have a direct affect on which targets move\n\t\t\t// for closure end effectors.\n\t\t\taffectedClosures.set( j, new Set() );\n\t\t\taffectedConnectedClosures.set( j, new Set() );\n\n\t\t\t// Initialize our array with all possible degrees of freedom\n\t\t\tlockedJointDoF.set( j, new Uint8Array( 6 ) );\n\t\t\tprevDoFValues.set( j, new Float64Array( 6 ) );\n\n\t\t} );\n\n\t\ttargets.forEach( target => {\n\n\t\t\tif ( target.isClosure ) {\n\n\t\t\t\tlet currJoint = target;\n\n\t\t\t\t// climb the joint tree and mark every joint as affecting this closure end.\n\t\t\t\twhile ( currJoint ) {\n\n\t\t\t\t\tif ( currJoint.isJoint ) {\n\n\t\t\t\t\t\taffectedClosures.get( currJoint ).add( target );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrJoint = currJoint.parent;\n\n\t\t\t\t}\n\n\t\t\t\t// and mark the joints up the other chain as effecting the other connector link.\n\t\t\t\tcurrJoint = target.child;\n\t\t\t\twhile ( currJoint ) {\n\n\t\t\t\t\tif ( currJoint.isJoint ) {\n\n\t\t\t\t\t\taffectedConnectedClosures.get( currJoint ).add( target );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrJoint = currJoint.parent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.targets = targets;\n\t\tthis.affectedClosures = affectedClosures;\n\t\tthis.affectedConnectedClosures = affectedConnectedClosures;\n\t\tthis.lockedJointDoF = lockedJointDoF;\n\t\tthis.lockedJointDoFCount = lockedJointDoFCount;\n\t\tthis.prevDoFValues = prevDoFValues;\n\n\t}\n\n\tsolve() {\n\n\t\tconst {\n\t\t\tdivergeThreshold,\n\t\t\tstallThreshold,\n\t\t\tchain,\n\t\t\trestPoseFactor,\n\t\t\tlockedJointDoFCount,\n\t\t\tprevDoFValues,\n\t\t\tuseSVD,\n\t\t\tmatrixPool,\n\t\t} = this;\n\n\t\tlet iterations = 0;\n\t\tlet prevErrorMagnitude = Infinity;\n\t\tlet status = - 1;\n\n\t\t// Clear out all the locked joints\n\t\tlockedJointDoFCount.clear();\n\n\t\t// TODO: instead of trying to use minimal euler angles we should try to represent joint\n\t\t// error as a quaternion in the quaternion vector.\n\t\tfor ( let i = 0, l = chain.length; i < l; i ++ ) {\n\n\t\t\tconst joint = chain[ i ];\n\t\t\tif ( joint.targetSet || joint.restPoseSet ) {\n\n\t\t\t\tjoint.tryMinimizeEulerAngles();\n\n\t\t\t}\n\n\t\t}\n\n\t\tdo {\n\n\t\t\tmatrixPool.releaseAll();\n\n\t\t\t// Make sure our matrices are all up to date\n\t\t\tfor ( let i = 0, l = chain.length; i < l; i ++ ) {\n\n\t\t\t\tconst joint = chain[ i ];\n\t\t\t\tjoint.updateMatrixWorld();\n\n\t\t\t}\n\n\t\t\t// TODO: this only needs to be recomputed if a joint was locked so maybe lets check that? We also\n\t\t\t// lock joints inside this function so maybe we can forgo that?\n\t\t\ttargetJoints.length = 0;\n\t\t\tfreeJoints.length = 0;\n\t\t\tthis.countUnconvergedVariables( freeJoints, targetJoints, dofResultInfo );\n\t\t\tconst { freeDoF, errorRows, totalError } = dofResultInfo;\n\n\t\t\t// Check if we've converged\n\t\t\tif ( errorRows === 0 ) {\n\n\t\t\t\tstatus = SOLVE_STATUS.CONVERGED;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// Check if we've diverged\n\t\t\tif ( totalError > prevErrorMagnitude + divergeThreshold ) {\n\n\t\t\t\tprevDoFValues.forEach( ( dofValues, joint ) => {\n\n\t\t\t\t\tjoint.dofValues.set( dofValues );\n\t\t\t\t\tjoint.setMatrixDoFNeedsUpdate();\n\n\t\t\t\t} );\n\n\n\t\t\t\tstatus = SOLVE_STATUS.DIVERGED;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevErrorMagnitude = totalError;\n\n\t\t\t// Check if we've hit max iterations\n\t\t\titerations ++;\n\t\t\tif ( iterations > this.maxIterations ) {\n\n\t\t\t\tstatus = SOLVE_STATUS.TIMEOUT;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// A * x = b\n\t\t\t// find x such that it yields b where is the clamped error we're trying to work towards\n\t\t\t// and A is the jacobian, and x is the delta joint angles.\n\n\t\t\tconst errorVector = matrixPool.get( errorRows, 1 );\n\t\t\tthis.fillErrorVector( targetJoints, errorVector );\n\n\t\t\tconst jacobian = matrixPool.get( errorRows, freeDoF );\n\t\t\tthis.fillJacobian( targetJoints, freeJoints, jacobian );\n\n\t\t\t// Solve for the pseudo inverse of the jacobian\n\t\t\tconst pseudoInverse = matrixPool.get( freeDoF, errorRows );\n\t\t\tlet failedSVD = false;\n\t\t\tif ( useSVD ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tconst m = errorRows;\n\t\t\t\t\tconst n = freeDoF;\n\t\t\t\t\tconst k = Math.min( m, n );\n\n\t\t\t\t\tconst u = matrixPool.get( m, k ); // m x k\n\t\t\t\t\tconst q = matrixPool.get( k, k ); // k x k\n\t\t\t\t\tconst v = matrixPool.get( n, k ); // ( k x n )^T -> ( n x k )\n\n\t\t\t\t\tmat.svd( u, q, v, jacobian );\n\n\t\t\t\t\tconst uTranspose = matrixPool.get( k, m );\n\t\t\t\t\tconst qInverse = matrixPool.get( k, k );\n\t\t\t\t\tmat.transpose( uTranspose, u );\n\n\t\t\t\t\t// if the diagonal value is close to 0 when taking the inverse\n\t\t\t\t\t// then set it to zero.\n\t\t\t\t\tfor ( let i = 0, l = q.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst val = q[ i ][ i ];\n\t\t\t\t\t\tlet inv;\n\t\t\t\t\t\tif ( Math.abs( val ) < 0.001 ) {\n\n\t\t\t\t\t\t\tinv = 0;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tinv = 1 / val;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqInverse[ i ][ i ] = inv;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// V * Qinv * Ut\n\t\t\t\t\tconst vqinv = matrixPool.get( n, k );\n\t\t\t\t\tmat.multiply( vqinv, v, qInverse );\n\t\t\t\t\tmat.multiply( pseudoInverse, vqinv, uTranspose );\n\n\t\t\t\t} catch ( err ) {\n\n\t\t\t\t\tfailedSVD = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! useSVD || failedSVD ) {\n\n\t\t\t\t// Use a transpose pseudo inverse approach: A^T * A * x = A^T * b with the damping term\n\t\t\t\t// J^T * J * x = J^T * e\n\t\t\t\t// x = J^T * ( J * J^T )^-1 * e\n\n\t\t\t\t// and with the adding damping\n\t\t\t\t// x = J^T * ( J * J^T + l^2 * I )^-1 * e\n\n\t\t\t\t// l^2 * I\n\t\t\t\tconst jacobianIdentityDamping = matrixPool.get( errorRows, errorRows );\n\t\t\t\tmat.identity( jacobianIdentityDamping );\n\t\t\t\tmat.scale( jacobianIdentityDamping, jacobianIdentityDamping, this.dampingFactor ** 2 );\n\n\t\t\t\t// J^T\n\t\t\t\tconst jacobianTranspose = matrixPool.get( freeDoF, errorRows );\n\t\t\t\tmat.transpose( jacobianTranspose, jacobian );\n\n\t\t\t\t// J * J^T\n\t\t\t\tconst jjt = matrixPool.get( errorRows, errorRows );\n\t\t\t\tmat.multiply( jjt, jacobian, jacobianTranspose );\n\n\t\t\t\t// J * J^T + l^2 * I\n\t\t\t\tconst jjti = matrixPool.get( errorRows, errorRows );\n\t\t\t\tmat.add( jjti, jjt, jacobianIdentityDamping );\n\n\t\t\t\t// ( J * J^T + l^2 * I )^-1\n\t\t\t\tconst jjtii = matrixPool.get( errorRows, errorRows );\n\t\t\t\tmat.invert( jjtii, jjti );\n\n\t\t\t\t// J^T * ( J * J^T + l^2 * I )^-1\n\t\t\t\tmat.multiply( pseudoInverse, jacobianTranspose, jjtii );\n\n\t\t\t}\n\n\t\t\t// x = deltaTheta = J^T * ( J * J^T + l^2 * I )^-1 * e\n\t\t\tconst deltaTheta = matrixPool.get( freeDoF, 1 );\n\t\t\tmat.multiply( deltaTheta, pseudoInverse, errorVector );\n\n\t\t\tif ( restPoseFactor !== 0 ) {\n\n\t\t\t\t// Nullspace Projection\n\t\t\t\t// I - J^-1 * J is the orthogonal null space of J where J^-1 is the pseudoinverse\n\t\t\t\t// Multiplied by the rest position of each dof\n\t\t\t\t// ( I - J^-1 * J ) * restPose\n\t\t\t\tconst restPose = matrixPool.get( freeDoF, 1 );\n\t\t\t\tconst restPoseResult = matrixPool.get( freeDoF, 1 );\n\t\t\t\tlet colIndex = 0;\n\t\t\t\tfor ( let i = 0, l = freeJoints.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst joint = freeJoints[ i ];\n\t\t\t\t\tconst lockedDoFCount = this.lockedJointDoFCount.get( joint ) || 0;\n\t\t\t\t\tconst isLocked = lockedDoFCount !== 0;\n\t\t\t\t\tconst lockedDoF = this.lockedJointDoF.get( joint );\n\n\t\t\t\t\tconst colCount = joint.rotationDoFCount + joint.translationDoFCount - lockedDoFCount;\n\t\t\t\t\tif ( joint.restPoseSet ) {\n\n\t\t\t\t\t\tconst dofList = joint.dof;\n\t\t\t\t\t\tconst dofValues = joint.dofValues;\n\t\t\t\t\t\tconst dofRestPose = joint.dofRestPose;\n\t\t\t\t\t\tfor ( let d = 0; d < colCount; d ++ ) {\n\n\t\t\t\t\t\t\tconst dof = dofList[ d ];\n\n\t\t\t\t\t\t\tif ( isLocked && lockedDoF[ dof ] ) continue;\n\n\t\t\t\t\t\t\trestPose[ colIndex ][ 0 ] = dofRestPose[ dof ] - dofValues[ dof ];\n\t\t\t\t\t\t\tcolIndex ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( let d = 0; d < colCount; d ++ ) {\n\n\t\t\t\t\t\t\trestPose[ colIndex ][ 0 ] = 0;\n\t\t\t\t\t\t\tcolIndex ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// J^-1 * J\n\t\t\t\tconst jij = matrixPool.get( freeDoF, freeDoF );\n\t\t\t\tmat.multiply( jij, pseudoInverse, jacobian );\n\n\t\t\t\t// ( I - J^-1 * J )\n\t\t\t\tconst ident = matrixPool.get( freeDoF, freeDoF );\n\t\t\t\tmat.identity( ident );\n\n\t\t\t\tconst nullSpaceProjection = matrixPool.get( freeDoF, freeDoF );\n\t\t\t\tmat.subtract( nullSpaceProjection, ident, jij );\n\n\t\t\t\t// ( I - J^-1 * J ) * restPose\n\t\t\t\tmat.multiply( restPoseResult, nullSpaceProjection, restPose );\n\n\t\t\t\tfor ( let r = 0; r < freeDoF; r ++ ) {\n\n\t\t\t\t\tconst val = restPoseResult[ r ][ 0 ];\n\t\t\t\t\tdeltaTheta[ r ][ 0 ] += val * restPoseFactor;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Check if our joints have not moved and returned stalled\n\t\t\tif ( stallThreshold > 0 ) {\n\n\t\t\t\tlet stalled = true;\n\t\t\t\tfor ( let i = 0, l = deltaTheta.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst delta = deltaTheta[ i ][ 0 ];\n\t\t\t\t\tif ( Math.abs( delta ) > stallThreshold ) {\n\n\t\t\t\t\t\tstalled = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( stalled ) {\n\n\t\t\t\t\tstatus = SOLVE_STATUS.STALLED;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Prep for a divergence check\n\t\t\tprevDoFValues.forEach( ( dofValues, joint ) => {\n\n\t\t\t\tdofValues.set( joint.dofValues );\n\n\t\t\t} );\n\n\t\t\t// apply the latest joint angles and lock and joints that have\n\t\t\t// hit their joint limits.\n\t\t\tthis.applyJointAngles( freeJoints, deltaTheta );\n\n\t\t\t// there's still error and we're under the max iterations\n\n\t\t} while ( true );\n\n\t\ttargetJoints.length = 0;\n\t\tfreeJoints.length = 0;\n\t\treturn status;\n\n\t}\n\n\t// Apply the delta values from the solve to the free joints in the list\n\tapplyJointAngles( freeJoints, deltaTheta ) {\n\n\t\tconst {\n\t\t\tlockedJointDoF,\n\t\t\tlockedJointDoFCount,\n\t\t} = this;\n\n\t\tlet lockedJoint = false;\n\t\tlet dti = 0;\n\t\tfor ( let i = 0, l = freeJoints.length; i < l; i ++ ) {\n\n\t\t\t// Apply the delta to every free joint\n\t\t\tconst joint = freeJoints[ i ];\n\t\t\tconst dofList = joint.dof;\n\t\t\tconst lockedDoF = lockedJointDoF.get( joint );\n\t\t\tconst isLocked = lockedJointDoFCount.has( joint );\n\n\t\t\tfor ( let d = 0, l = dofList.length; d < l; d ++ ) {\n\n\t\t\t\tconst dof = dofList[ d ];\n\t\t\t\tif ( isLocked && lockedDoF[ dof ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst value = joint.getDoFValue( dof );\n\t\t\t\tconst hitLimit = joint.setDoFValue( dof, value + deltaTheta[ dti ][ 0 ] );\n\n\t\t\t\t// lock the joint if we hit a limit\n\t\t\t\tif ( hitLimit ) {\n\n\t\t\t\t\tif ( ! lockedJointDoFCount.has( joint ) ) {\n\n\t\t\t\t\t\tlockedJointDoFCount.set( joint, 0 );\n\t\t\t\t\t\tlockedDoF.fill( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst lockedCount = lockedJointDoFCount.get( joint );\n\t\t\t\t\tlockedJointDoFCount.set( joint, lockedCount + 1 );\n\t\t\t\t\tlockedDoF[ dof ] = 1;\n\t\t\t\t\tlockedJoint = true;\n\n\t\t\t\t}\n\n\t\t\t\tdti ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( dti !== deltaTheta.length ) {\n\n\t\t\tthrow new Error();\n\n\t\t}\n\n\t\treturn lockedJoint;\n\n\t}\n\n\t// generate the jacobian\n\t// The jacobian has one column for each free degree of freedom and a row for every\n\t// target degree of freedom we have. The entries are generated by adjusting every\n\t// DoF by some epsilon and storing how much it affected the target error.\n\tfillJacobian( targetJoints, freeJoints, outJacobian ) {\n\n\t\tconst {\n\t\t\ttranslationStep,\n\t\t\trotationStep,\n\t\t\tlockedJointDoF,\n\t\t\tlockedJointDoFCount,\n\t\t\ttranslationFactor,\n\t\t\trotationFactor,\n\t\t} = this;\n\n\t\t// TODO: abstract this\n\t\tconst affectedClosures = this.affectedClosures;\n\t\tconst affectedConnectedClosures = this.affectedConnectedClosures;\n\n\t\tlet colIndex = 0;\n\t\tfor ( let c = 0, tc = freeJoints.length; c < tc; c ++ ) {\n\n\t\t\t// TODO: If this is a goal we should skip adding it to the jacabian columns\n\t\t\tconst freeJoint = freeJoints[ c ];\n\t\t\tconst relevantClosures = affectedClosures.get( freeJoint );\n\t\t\tconst relevantConnectedClosures = affectedConnectedClosures.get( freeJoint );\n\t\t\tconst dofList = freeJoint.dof;\n\t\t\tconst colCount = freeJoint.translationDoFCount + freeJoint.rotationDoFCount;\n\n\t\t\tconst isLocked = lockedJointDoFCount.has( freeJoint );\n\t\t\tconst lockedDoF = lockedJointDoF.get( freeJoint );\n\n\t\t\t// get the world inverse of the free joint\n\t\t\tmat4.invert( tempInverseMatrixWorld, freeJoint.matrixWorld );\n\n\t\t\t// iterate over every degree of freedom in the joint\n\t\t\tfor ( let co = 0; co < colCount; co ++ ) {\n\n\t\t\t\tconst dof = dofList[ co ];\n\n\t\t\t\t// skip this joint if it's locked\n\t\t\t\tif ( isLocked && lockedDoF[ dof ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tlet rowIndex = 0;\n\n\t\t\t\t// generate the adjusted matrix based on the epsilon for the joint.\n\t\t\t\tlet delta = dof < 3 ? translationStep : rotationStep;\n\t\t\t\tif ( freeJoint.getDeltaWorldMatrix( dof, delta, tempDeltaWorldMatrix ) ) {\n\n\t\t\t\t\tdelta *= - 1;\n\n\t\t\t\t}\n\n\t\t\t\t// Iterate over every target\n\t\t\t\tfor ( let r = 0, tr = targetJoints.length; r < tr; r ++ ) {\n\n\t\t\t\t\tconst targetJoint = targetJoints[ r ];\n\n\t\t\t\t\t// if it's a closure target\n\t\t\t\t\tif ( targetJoint.isClosure ) {\n\n\t\t\t\t\t\tif ( relevantClosures.has( targetJoint ) || relevantConnectedClosures.has( targetJoint ) ) {\n\n\t\t\t\t\t\t\t// TODO: If this is a Goal it only add 1 or 2 fields if only two axes are set. Quat is only\n\t\t\t\t\t\t\t// needed if 3 eulers are used.\n\t\t\t\t\t\t\t// TODO: these could be cached per target joint get the current error within the closure joint\n\n\t\t\t\t\t\t\t// Get the error from child towards the closure target\n\t\t\t\t\t\t\ttargetJoint.getClosureError( tempPos, tempQuat );\n\t\t\t\t\t\t\tif ( relevantConnectedClosures.has( targetJoint ) ) {\n\n\t\t\t\t\t\t\t\t// If this is affecting a link connected to a closure joint then adjust that child link by\n\t\t\t\t\t\t\t\t// the delta rotation.\n\t\t\t\t\t\t\t\tmat4.multiply( targetRelativeToJointMatrix, tempInverseMatrixWorld, targetJoint.child.matrixWorld );\n\t\t\t\t\t\t\t\tmat4.multiply( targetDeltaWorldMatrix, tempDeltaWorldMatrix, targetRelativeToJointMatrix );\n\n\t\t\t\t\t\t\t\t// Get the new error\n\t\t\t\t\t\t\t\tgetMatrixDifference( targetJoint.matrixWorld, targetDeltaWorldMatrix, tempPos2, tempQuat2 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// If this is directly affecting a closure joint then adjust that child link by the delta\n\t\t\t\t\t\t\t\t// rotation.\n\t\t\t\t\t\t\t\tmat4.multiply( targetRelativeToJointMatrix, tempInverseMatrixWorld, targetJoint.matrixWorld );\n\t\t\t\t\t\t\t\tmat4.multiply( targetDeltaWorldMatrix, tempDeltaWorldMatrix, targetRelativeToJointMatrix );\n\n\t\t\t\t\t\t\t\t// Get the new error\n\t\t\t\t\t\t\t\tgetMatrixDifference( targetDeltaWorldMatrix, targetJoint.child.matrixWorld, tempPos2, tempQuat2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Get the amount that the rotation and translation error changed due to the\n\t\t\t\t\t\t\t// small DoF adjustment to serve as the derivative.\n\t\t\t\t\t\t\tvec3.subtract( tempPos, tempPos, tempPos2 );\n\t\t\t\t\t\t\tvec3.scale( tempPos, tempPos, translationFactor / delta );\n\n\t\t\t\t\t\t\tvec4.subtract( tempQuat, tempQuat, tempQuat2 );\n\t\t\t\t\t\t\tvec4.scale( tempQuat, tempQuat, rotationFactor / delta );\n\n\t\t\t\t\t\t\tif ( targetJoint.isGoal ) {\n\n\t\t\t\t\t\t\t\tconst { translationDoFCount, rotationDoFCount, dof } = targetJoint;\n\t\t\t\t\t\t\t\tfor ( let i = 0; i < translationDoFCount; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tconst d = dof[ i ];\n\t\t\t\t\t\t\t\t\toutJacobian[ rowIndex + i ][ colIndex ] = tempPos[ d ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( rotationDoFCount === 3 ) {\n\n\t\t\t\t\t\t\t\t\toutJacobian[ rowIndex + translationDoFCount + 0 ][ colIndex ] = tempQuat[ 0 ];\n\t\t\t\t\t\t\t\t\toutJacobian[ rowIndex + translationDoFCount + 1 ][ colIndex ] = tempQuat[ 1 ];\n\t\t\t\t\t\t\t\t\toutJacobian[ rowIndex + translationDoFCount + 2 ][ colIndex ] = tempQuat[ 2 ];\n\t\t\t\t\t\t\t\t\toutJacobian[ rowIndex + translationDoFCount + 3 ][ colIndex ] = tempQuat[ 3 ];\n\t\t\t\t\t\t\t\t\trowIndex += 4;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trowIndex += translationDoFCount;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// set translation\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + 0 ][ colIndex ] = tempPos[ 0 ];\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + 1 ][ colIndex ] = tempPos[ 1 ];\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + 2 ][ colIndex ] = tempPos[ 2 ];\n\n\t\t\t\t\t\t\t\t// set rotation\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + 3 ][ colIndex ] = tempQuat[ 0 ];\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + 4 ][ colIndex ] = tempQuat[ 1 ];\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + 5 ][ colIndex ] = tempQuat[ 2 ];\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + 6 ][ colIndex ] = tempQuat[ 3 ];\n\t\t\t\t\t\t\t\trowIndex += 7;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// if the target isn't relevant then there's no delta\n\t\t\t\t\t\t\tlet totalRows = 7;\n\t\t\t\t\t\t\tif ( targetJoint.isGoal ) {\n\n\t\t\t\t\t\t\t\ttotalRows = targetJoint.translationDoFCount;\n\t\t\t\t\t\t\t\tif ( targetJoint.rotationDoFCount === 3 ) {\n\n\t\t\t\t\t\t\t\t\ttotalRows += 4;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < totalRows; i ++ ) {\n\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + i ][ colIndex ] = 0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trowIndex += totalRows;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if this joint has a target set and update the jacobian rows if it does\n\t\t\t\t\tif ( targetJoint.targetSet ) {\n\n\t\t\t\t\t\tconst rowCount = targetJoint.translationDoFCount + targetJoint.rotationDoFCount;\n\n\t\t\t\t\t\tif ( freeJoint === targetJoint ) {\n\n\t\t\t\t\t\t\t// if we're just dealing with a target dof joint then there can't be any influence\n\t\t\t\t\t\t\t// but otherwise the only joint that can have an effect on this error is the joint\n\t\t\t\t\t\t\t// itself.\n\t\t\t\t\t\t\t// TODO: Having noted that is this really necessary? Is there any way that this doesn't just\n\t\t\t\t\t\t\t// jump to the solution and lock? How can we afford some slack? With a low weight? Does that\n\t\t\t\t\t\t\t// get applied here?\n\t\t\t\t\t\t\t// TODO: If this joint happens to have three euler joints we need to use a quat here. Otherwise we\n\t\t\t\t\t\t\t// use the euler angles.\n\t\t\t\t\t\t\tfor ( let i = 0; i < rowCount; i ++ ) {\n\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + colIndex ][ colIndex ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < rowCount; i ++ ) {\n\n\t\t\t\t\t\t\t\toutJacobian[ rowIndex + i ][ colIndex ] = 0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trowIndex += rowCount;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcolIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( colIndex !== outJacobian[ 0 ].length ) {\n\n\t\t\tthrow new Error();\n\n\t\t}\n\n\t}\n\n\t// Fill in the error vector\n\tfillErrorVector( targetJoints, errorVector ) {\n\n\t\tlet rowIndex = 0;\n\t\tfor ( let i = 0, l = targetJoints.length; i < l; i ++ ) {\n\n\t\t\tconst joint = targetJoints[ i ];\n\t\t\tif ( joint.isClosure ) {\n\n\t\t\t\taccumulateClosureError( this, joint, rowIndex, errorVector, errorResultInfo );\n\t\t\t\trowIndex += errorResultInfo.rowCount;\n\n\t\t\t}\n\n\t\t\tif ( joint.targetSet ) {\n\n\t\t\t\taccumulateTargetError( this, joint, rowIndex, errorVector, errorResultInfo );\n\t\t\t\trowIndex += errorResultInfo.rowCount;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Count the unconverged targets in the chain and store them in targetJoints and store\n\t// any freeJoints in\n\tcountUnconvergedVariables( freeJoints, targetJoints, dofResultInfo ) {\n\n\t\tconst { lockedJointDoFCount } = this;\n\n\t\tconst chain = this.chain;\n\t\tlet totalError = 0;\n\t\tlet errorRows = 0;\n\t\tlet unconvergedRows = 0;\n\t\tlet freeDoF = 0;\n\t\tfor ( let i = 0, l = chain.length; i < l; i ++ ) {\n\n\t\t\tlet addToTargetList = false;\n\t\t\tconst joint = chain[ i ];\n\t\t\tconst lockedDoF = lockedJointDoFCount.get( joint ) || 0;\n\n\t\t\t// TODO: Should we check every variable against the convergence threshold or is\n\t\t\t// it better to check the magnitude?\n\n\t\t\t// TODO: We may be able to speed this up by using the square distance and length\n\t\t\t// to compare error.\n\n\t\t\t// TODO: If this is a goal we shouldnt add to the free dof because they won't be added\n\t\t\t// to the jacobian\n\n\t\t\t// If this is a closure joint then we need to make sure we're solving\n\t\t\t// for the other child end to meet this joint so this error is important.\n\t\t\tif ( joint.isClosure ) {\n\n\t\t\t\taccumulateClosureError( this, joint, errorRows, null, errorResultInfo );\n\t\t\t\tif ( ! errorResultInfo.isConverged ) {\n\n\t\t\t\t\tunconvergedRows += errorResultInfo.rowCount;\n\t\t\t\t\ttotalError += errorResultInfo.totalError;\n\n\t\t\t\t}\n\n\t\t\t\taddToTargetList = true;\n\t\t\t\terrorRows += errorResultInfo.rowCount;\n\n\t\t\t}\n\n\t\t\t// Check out far the joint is from the target dof value.\n\t\t\tconst dofList = joint.dof;\n\t\t\tif ( joint.targetSet ) {\n\n\t\t\t\taccumulateTargetError( this, joint, errorRows, null, errorResultInfo );\n\t\t\t\tif ( ! errorResultInfo.isConverged ) {\n\n\t\t\t\t\tunconvergedRows += errorResultInfo.rowCount;\n\t\t\t\t\ttotalError += errorResultInfo.totalError;\n\n\t\t\t\t}\n\n\t\t\t\taddToTargetList = true;\n\t\t\t\terrorRows += errorResultInfo.rowCount;\n\n\t\t\t}\n\n\t\t\tif ( ! joint.isGoal && dofList.length > 0 ) {\n\n\t\t\t\tfreeDoF += dofList.length - lockedDoF;\n\t\t\t\tfreeJoints.push( joint );\n\n\t\t\t}\n\n\t\t\tif ( addToTargetList ) {\n\n\t\t\t\ttargetJoints.push( joint );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// if it turns out that everything is converged.\n\t\tif ( unconvergedRows === 0 ) {\n\n\t\t\terrorRows = 0;\n\n\t\t}\n\n\t\tdofResultInfo.errorRows = errorRows;\n\t\tdofResultInfo.freeDoF = freeDoF;\n\t\tdofResultInfo.totalError = totalError;\n\n\t}\n\n}\n","import { mat } from './utils/matrix.js';\n\nclass FixedMatrixPool {\n\n\tconstructor( row, col ) {\n\n\t\tconst matrices = [];\n\t\tlet index = 0;\n\n\t\tthis.get = function () {\n\n\t\t\tlet matrix = matrices[ index ];\n\t\t\tif ( ! matrix ) {\n\n\t\t\t\tmatrices[ index ] = matrix = mat.create( row, col );\n\n\t\t\t}\n\n\t\t\tindex ++;\n\t\t\treturn matrix;\n\n\t\t};\n\n\t\tthis.releaseAll = function () {\n\n\t\t\tindex = 0;\n\n\t\t};\n\n\t}\n\n}\n\nexport class MatrixPool {\n\n\tconstructor() {\n\n\t\tconst pools = {};\n\t\tconst poolArray = [];\n\t\tthis.get = function ( row, col ) {\n\n\t\t\tlet colPools = pools[ row ];\n\t\t\tif ( ! colPools ) {\n\n\t\t\t\tcolPools = pools[ row ] = {};\n\n\t\t\t}\n\n\t\t\tlet pool = colPools[ col ];\n\t\t\tif ( ! pool ) {\n\n\t\t\t\tpool = colPools[ col ] = new FixedMatrixPool( row, col );\n\t\t\t\tpoolArray.push( pool );\n\n\t\t\t}\n\n\t\t\treturn pool.get();\n\n\t\t};\n\n\t\tthis.releaseAll = function () {\n\n\t\t\tfor ( let i = 0, l = poolArray.length; i < l; i ++ ) {\n\n\t\t\t\tpoolArray[ i ].releaseAll();\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n","import { Frame } from './Frame.js';\n\nexport class Link extends Frame {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis.isLink = true;\n\t\tthis.closureJoints = [];\n\n\t}\n\n\taddChild( child ) {\n\n\t\tif ( ! child.isJoint ) {\n\n\t\t\tthrow new Error( 'Link: Added child must be a Joint.' );\n\n\t\t} else {\n\n\t\t\tsuper.addChild( child );\n\n\t\t}\n\n\t}\n\n}\n","import { Joint, DOF } from './Joint.js';\n\nexport class Goal extends Joint {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\t\tthis.isGoal = true;\n\t\tthis.setFreeDoF();\n\n\t}\n\n\tsetDoF( ...args ) {\n\n\t\t// We don't support rotation goals that only specify 1 or 2 free rotation axes.\n\t\tlet rotCount =\n\t\t\tNumber( args.includes( DOF.EX ) ) +\n\t\t\tNumber( args.includes( DOF.EY ) ) +\n\t\t\tNumber( args.includes( DOF.EZ ) );\n\n\t\tif ( rotCount !== 0 && rotCount !== 3 ) {\n\n\t\t\tthrow new Error( 'Goal: Only full 3 DoF or 0 DoF rotation goals are supported.' );\n\n\t\t}\n\n\t\tsuper.setDoF( ...args );\n\n\t}\n\n\tsetGoalDoF( ...args ) {\n\n\t\tthis.setDoF( ...args );\n\n\t}\n\n\tsetFreeDoF( ...args ) {\n\n\t\tconst freeDoF = [\n\t\t\tDOF.X, DOF.Y, DOF.Z,\n\t\t\tDOF.EX, DOF.EY, DOF.EZ,\n\t\t].filter( d => ! args.includes( d ) );\n\t\tthis.setDoF( ...freeDoF );\n\n\t}\n\n\taddChild() {\n\n\t\tthrow new Error( 'Goal: Cannot add children to Goal.' );\n\n\t}\n\n}\n","export const JOINT_STRIDE = 304;\n\nexport const LINK_STRIDE = 56;\n\nexport function generateSharedBuffer( frames, useSharedArrayBuffer = true ) {\n\n\t// dofValues \t6 * 4\n\t// dofTarget \t6 * 4\n\t// dofRestPose \t6 * 4\n\t// minDoFLimit \t6 * 4\n\t// maxDoFLimit \t6 * 4\n\t// position \t3 * 4\n\t// quaternion \t4 * 4\n\t// targetSet \t1\n\t// restPoseSet \t1\n\t// --\n\t// total  \t\t150 bytes per joint\n\t// 4 byte aligned: 152\n\n\tlet arrayBuffer;\n\tif ( useSharedArrayBuffer ) {\n\n\t\tarrayBuffer = new SharedArrayBuffer( JOINT_STRIDE * frames.length );\n\n\t} else {\n\n\t\tarrayBuffer = new ArrayBuffer( JOINT_STRIDE * frames.length );\n\n\t}\n\n\tconst float64 = new Float32Array( arrayBuffer );\n\tconst byte8 = new Uint8Array( arrayBuffer );\n\tapplyToBuffer( frames, float64, byte8 );\n\treturn arrayBuffer;\n\n}\n\nexport function applyToBuffer( frames, floatBuffer, byteBuffer, copyDoFValues = true, copyJointSettings = true ) {\n\n\tfor ( let i = 0, l = frames.length; i < l; i ++ ) {\n\n\t\tcopyFrameToBuffer( frames[ i ], floatBuffer, byteBuffer, i * JOINT_STRIDE, copyDoFValues, copyJointSettings );\n\n\t}\n\n}\n\nexport function applyFromBuffer( frames, floatBuffer, byteBuffer, copyDoFValues = true, copyJointSettings = true ) {\n\n\tfor ( let i = 0, l = frames.length; i < l; i ++ ) {\n\n\t\tcopyBufferToFrame( frames[ i ], floatBuffer, byteBuffer, JOINT_STRIDE * i, copyDoFValues, copyJointSettings );\n\n\t}\n\n}\n\n// Copy data from the frame to the given buffer starting at the given byte offset. Joints take JOINT_STRIDE\n// bytes while links take LINK_STRIDE bytes.\nexport function copyFrameToBuffer(\n\tframe,\n\tfloatBuffer,\n\tbyteBuffer,\n\tbyteOffset,\n\tcopyDoFValues = true,\n\tcopyJointSettings = true,\n) {\n\n\tconst floatOffset = byteOffset / 4;\n\tif ( copyJointSettings ) {\n\n\t\tconst {\n\t\t\tposition,\n\t\t\tquaternion,\n\t\t} = frame;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfloatBuffer[ floatOffset + 0 + i ] = position[ i ];\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tfloatBuffer[ floatOffset + 3 + i ] = quaternion[ i ];\n\n\t\t}\n\n\t\tif ( frame.isJoint ) {\n\n\t\t\tconst {\n\t\t\t\tdofTarget,\n\t\t\t\tdofRestPose,\n\t\t\t\tminDoFLimit,\n\t\t\t\tmaxDoFLimit,\n\t\t\t\ttargetSet,\n\t\t\t\trestPoseSet,\n\t\t\t} = frame;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tfloatBuffer[ floatOffset + 7 + 0 * 6 + i ] = dofTarget[ i ];\n\t\t\t\tfloatBuffer[ floatOffset + 7 + 1 * 6 + i ] = dofRestPose[ i ];\n\t\t\t\tfloatBuffer[ floatOffset + 7 + 2 * 6 + i ] = minDoFLimit[ i ];\n\t\t\t\tfloatBuffer[ floatOffset + 7 + 3 * 6 + i ] = maxDoFLimit[ i ];\n\n\t\t\t}\n\n\t\t\tbyteBuffer[ byteOffset + 148 ] = Number( targetSet );\n\t\t\tbyteBuffer[ byteOffset + 149 ] = Number( restPoseSet );\n\n\t\t}\n\n\n\t}\n\n\tif ( copyDoFValues && frame.isJoint ) {\n\n\t\tconst { dofValues } = frame;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tfloatBuffer[ floatOffset + 7 + 4 * 6 + i ] = dofValues[ i ];\n\n\t\t}\n\n\t}\n\n}\n\n// Copy data from the given buffer to the given frame starting at the given byte offset.\nexport function copyBufferToFrame(\n\tjoint,\n\tfloatBuffer,\n\tbyteBuffer,\n\tbyteOffset,\n\tcopyDoFValues = true,\n\tcopyJointSettings = true,\n) {\n\n\tconst floatOffset = byteOffset / 4;\n\n\tif ( copyJointSettings ) {\n\n\t\tjoint.setPosition(\n\t\t\tfloatBuffer[ floatOffset + 0 ],\n\t\t\tfloatBuffer[ floatOffset + 1 ],\n\t\t\tfloatBuffer[ floatOffset + 2 ],\n\t\t);\n\t\tjoint.setQuaternion(\n\t\t\tfloatBuffer[ floatOffset + 3 + 0 ],\n\t\t\tfloatBuffer[ floatOffset + 3 + 1 ],\n\t\t\tfloatBuffer[ floatOffset + 3 + 2 ],\n\t\t\tfloatBuffer[ floatOffset + 3 + 3 ],\n\t\t);\n\n\t\tif ( joint.isJoint ) {\n\n\t\t\tconst {\n\t\t\t\tdofTarget,\n\t\t\t\tdofRestPose,\n\t\t\t\tminDoFLimit,\n\t\t\t\tmaxDoFLimit,\n\t\t\t} = joint;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tdofTarget[ i ] = floatBuffer[ floatOffset + 7 + 0 * 6 + i ];\n\t\t\t\tdofRestPose[ i ] = floatBuffer[ floatOffset + 7 + 1 * 6 + i ];\n\t\t\t\tminDoFLimit[ i ] = floatBuffer[ floatOffset + 7 + 2 * 6 + i ];\n\t\t\t\tmaxDoFLimit[ i ] = floatBuffer[ floatOffset + 7 + 3 * 6 + i ];\n\n\t\t\t}\n\n\t\t\tjoint.targetSet = Boolean( byteBuffer[ byteOffset + 148 ] );\n\t\t\tjoint.restPoseSet = Boolean( byteBuffer[ byteOffset + 149 ] );\n\n\t\t}\n\n\t}\n\n\tif ( copyDoFValues && joint.isJoint ) {\n\n\t\tconst { dofValues } = joint;\n\t\tlet changed = false;\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst v = floatBuffer[ floatOffset + 7 + 4 * 6 + i ];\n\t\t\tif ( v !== dofValues[ i ] ) {\n\n\t\t\t\tdofValues[ i ] = v;\n\t\t\t\tchanged = true;\n\n\t\t\t}\n\n\n\t\t}\n\n\t\t// only update dof matrix if it changed\n\t\tif ( changed ) {\n\n\t\t\tjoint.setMatrixDoFNeedsUpdate();\n\n\t\t}\n\n\t}\n\n}\n","import { Solver } from '../core/Solver.js';\nimport { SOLVE_STATUS } from '../core/ChainSolver.js';\nimport { deserialize } from './serialize.js';\nimport { applyToBuffer, applyFromBuffer } from './utils.js';\n\nconst useSharedArrayBuffers = ( typeof SharedArrayBuffer ) !== 'undefined';\n\nlet solver = new Solver();\nlet solveHandle = - 1;\n\n// List of all frames in the graph\nlet frames = null;\n\n// Buffer variants\nlet buffer = null;\nlet floatBuffer = null;\nlet byteBuffer = null;\n\nglobal.onmessage = function ( { data: e } ) {\n\n\tconst { type, data } = e;\n\tswitch ( type ) {\n\n\t\t// The ik graph needs to be updated with all the deserialized\n\t\tcase 'updateStructure':\n\t\t\tframes = deserialize( data.serialized );\n\t\t\tsolver.roots = frames.filter( f => f.parent === null );\n\t\t\tsolver.updateStructure();\n\n\t\t\tbuffer = data.buffer;\n\t\t\tbyteBuffer = new Uint8Array( buffer );\n\t\t\tfloatBuffer = new Float32Array( buffer );\n\t\t\tbreak;\n\n\t\t// update the frame state from buffer when not using shared array buffers\n\t\tcase 'updateFrameState':\n\t\t\tbyteBuffer.set( new Uint8Array( data.buffer ) );\n\t\t\tbreak;\n\n\t\t// Update the settings of the solver\n\t\tcase 'updateSolverSettings':\n\t\t\tObject.assign( solver, data );\n\t\t\tbreak;\n\n\t\t// Start the solve loop\n\t\tcase 'startSolve':\n\t\t\tif ( solveHandle === - 1 ) {\n\n\t\t\t\tupdateSolve();\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t// Stop the solve loop\n\t\tcase 'endSolve':\n\t\t\tif ( solveHandle !== - 1 ) {\n\n\t\t\t\tclearTimeout( solveHandle );\n\t\t\t\tsolveHandle = - 1;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t}\n\n};\n\n// The iterative solve loop\nfunction updateSolve() {\n\n\t// Copy any frame updates from the main thread\n\tapplyFromBuffer( frames, floatBuffer, byteBuffer, false, true );\n\n\t// Solve 1 iteration taking the most severe chain result\n\tconst status = solver.solve();\n\n\t// Copy the new DoF back to the shared buffer\n\tapplyToBuffer( frames, floatBuffer, byteBuffer, true, false );\n\n\tif ( status.find( r => r === SOLVE_STATUS.TIMEOUT ) ) {\n\n\t\t// yield so we can react to messages\n\t\tsolveHandle = setTimeout( updateSolve );\n\n\t} else {\n\n\t\tsolveHandle = - 1;\n\n\t}\n\n\t// send a copy of the buffer back if not using shared array buffers\n\tif ( useSharedArrayBuffers ) {\n\n\t\tthis.postMessage( {\n\n\t\t\ttype: 'updateSolve',\n\t\t\tdata: {\n\t\t\t\tstatus,\n\t\t\t},\n\n\t\t} );\n\n\t} else {\n\n\t\tconst resultsBuffer = buffer.slice();\n\t\tthis.postMessage( {\n\n\t\t\ttype: 'updateSolve',\n\t\t\tdata: {\n\t\t\t\tstatus,\n\t\t\t\tbuffer: resultsBuffer,\n\t\t\t},\n\n\t\t}, [ resultsBuffer ] );\n\n\t}\n\n}\n","import { ChainSolver } from './ChainSolver.js';\nimport { findRoots } from './utils/findRoots.js';\nimport { MatrixPool } from './MatrixPool.js';\n\nexport class Solver {\n\n\tconstructor( roots = [] ) {\n\n\t\tthis.matrixPool = new MatrixPool();\n\n\t\tthis.useSVD = false;\n\n\t\tthis.maxIterations = 5;\n\t\tthis.stallThreshold = 1e-4;\n\t\tthis.dampingFactor = 0.001;\n\t\tthis.divergeThreshold = 0.01;\n\t\tthis.restPoseFactor = 0.01;\n\n\t\tthis.translationConvergeThreshold = 1e-3;\n\t\tthis.rotationConvergeThreshold = 1e-5;\n\n\t\tthis.translationFactor = 1;\n\t\tthis.rotationFactor = 1;\n\n\t\tthis.translationStep = 1e-3;\n\t\tthis.rotationStep = 1e-3;\n\n\t\tthis.translationErrorClamp = 0.1;\n\t\tthis.rotationErrorClamp = 0.1;\n\n\t\tthis.roots = Array.isArray( roots ) ? [ ...roots ] : [ roots ];\n\t\tthis.solvers = null;\n\n\t\tthis.updateStructure();\n\n\t}\n\n\t// needs to be called whenever tree structure is updated\n\tupdateStructure() {\n\n\t\tconst roots = findRoots( this.roots );\n\t\tconst chains = [];\n\t\tconst traversal = new Set();\n\t\tconst allChainJoints = new Set();\n\t\tconst traverseChains = frame => {\n\n\t\t\t// If we found a joint then add it to the traversal list\n\t\t\tif ( frame.isJoint ) {\n\n\t\t\t\tconst joint = frame;\n\t\t\t\ttraversal.add( joint );\n\n\t\t\t\t// If we found a closure joint\n\t\t\t\tif ( joint.isClosure ) {\n\n\t\t\t\t\t// Traverse back up the tree until we find a common ancestor\n\t\t\t\t\t// and create a new chain\n\t\t\t\t\tconst chainSet = new Set();\n\t\t\t\t\tlet curr = joint.child;\n\t\t\t\t\twhile ( curr ) {\n\n\t\t\t\t\t\tif ( curr.isJoint ) {\n\n\t\t\t\t\t\t\tif ( traversal.has( curr ) ) {\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tchainSet.add( curr );\n\t\t\t\t\t\t\t\tallChainJoints.add( curr );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurr = curr.parent;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttraversal.forEach( c => {\n\n\t\t\t\t\t\tchainSet.add( c );\n\t\t\t\t\t\tallChainJoints.add( c );\n\n\t\t\t\t\t} );\n\t\t\t\t\tchains.push( chainSet );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Continue traversing\n\t\t\tconst children = frame.children;\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\ttraverseChains( children[ i ] );\n\n\t\t\t}\n\n\t\t\t// Remove the joint from our traversal set\n\t\t\ttraversal.delete( frame );\n\n\t\t};\n\n\t\t// find all chains in the roots\n\t\troots.forEach( traverseChains );\n\n\t\t// Merge interdependent chains\n\t\tconst independentChains = [];\n\t\twhile ( chains.length ) {\n\n\t\t\tconst currChain = chains.pop();\n\t\t\tindependentChains.push( currChain );\n\t\t\tfor ( let i = 0; i < chains.length; i ++ ) {\n\n\t\t\t\t// see if this chain is dependent on the current chain\n\t\t\t\t// and if so merge the chains.\n\t\t\t\tconst otherChain = chains[ i ];\n\n\t\t\t\tlet dependent = false;\n\t\t\t\totherChain.forEach( c => {\n\n\t\t\t\t\tdependent = dependent || currChain.has( c );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( dependent ) {\n\n\t\t\t\t\totherChain.forEach( c => currChain.add( c ) );\n\t\t\t\t\tchains.splice( i, 1 );\n\t\t\t\t\ti --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Find any joints that aren't considered part of a solve chain so we\n\t\t// can just update them using forward kinematics.\n\t\tconst nonChainJoints = new Set();\n\t\troots.forEach( root => root.traverse( c => {\n\n\t\t\tif ( c.isJoint && c.dof.length > 0 && ! allChainJoints.has( c ) ) {\n\n\t\t\t\tnonChainJoints.add( c );\n\n\t\t\t}\n\n\t\t} ) );\n\n\t\t// Create the solvers for the chains\n\t\tthis.solvers = independentChains.map( c => new ChainSolver( c ) );\n\t\tthis.nonChainJoints = nonChainJoints;\n\n\t}\n\n\tsolve() {\n\n\t\tconst { solvers, nonChainJoints } = this;\n\n\t\t// update any non chain joints\n\t\tnonChainJoints.forEach( joint => {\n\n\t\t\tif ( joint.targetSet ) {\n\n\t\t\t\tjoint.dofValues.set( joint.dofTarget );\n\t\t\t\tjoint.setMatrixDoFNeedsUpdate();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst results = [];\n\t\tfor ( let i = 0, l = solvers.length; i < l; i ++ ) {\n\n\t\t\tconst s = solvers[ i ];\n\t\t\ts.matrixPool = this.matrixPool;\n\n\t\t\ts.useSVD = this.useSVD;\n\n\t\t\ts.maxIterations = this.maxIterations;\n\t\t\ts.stallThreshold = this.stallThreshold;\n\t\t\ts.dampingFactor = this.dampingFactor;\n\t\t\ts.divergeThreshold = this.divergeThreshold;\n\t\t\ts.restPoseFactor = this.restPoseFactor;\n\n\t\t\ts.translationConvergeThreshold = this.translationConvergeThreshold;\n\t\t\ts.rotationConvergeThreshold = this.rotationConvergeThreshold;\n\n\t\t\ts.translationFactor = this.translationFactor;\n\t\t\ts.rotationFactor = this.rotationFactor;\n\n\t\t\ts.translationStep = this.translationStep;\n\t\t\ts.rotationStep = this.rotationStep;\n\n\t\t\ts.translationErrorClamp = this.translationErrorClamp;\n\t\t\ts.rotationErrorClamp = this.rotationErrorClamp;\n\n\t\t\tconst result = s.solve();\n\t\t\tresults.push( result );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n}\n","export function findRoots( frames ) {\n\n\tconst potentialRoots = frames.map( f => {\n\n\t\tlet lastParent = f;\n\t\tf.traverseParents( p => {\n\n\t\t\tlastParent = p;\n\n\t\t} );\n\t\treturn lastParent;\n\n\t} );\n\tconst roots = [];\n\tconst set = new Set();\n\n\tfor ( let i = 0; i < potentialRoots.length; i ++ ) {\n\n\t\tconst frame = potentialRoots[ i ];\n\n\t\t// If this frame has already been traversed then we know it's in\n\t\t// a root already.\n\t\tif ( set.has( frame ) ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\troots.push( frame );\n\t\tframe.traverse( c => {\n\n\t\t\tif ( set.has( c ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tset.add( c );\n\n\t\t\t// If we come across a joint or link with closures traverse them\n\t\t\t// as far as possible to add them to the roots if they haven't been\n\t\t\t// added already.\n\t\t\tlet closureConnections;\n\t\t\tif ( c.isLink ) {\n\n\t\t\t\tclosureConnections = c.closureJoints;\n\n\t\t\t} else if ( c.isJoint && c.isClosure ) {\n\n\t\t\t\tclosureConnections = [ c.child ];\n\n\t\t\t}\n\n\t\t\tif ( closureConnections ) {\n\n\t\t\t\tclosureConnections.forEach( cl => {\n\n\t\t\t\t\tlet lastParent = cl;\n\t\t\t\t\tcl.traverseParents( p => {\n\n\t\t\t\t\t\tlastParent = p;\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( ! set.has( lastParent ) ) {\n\n\t\t\t\t\t\tpotentialRoots.push( lastParent );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\treturn roots;\n\n}\n","import { Joint } from '../core/Joint.js';\nimport { Link } from '../core/Link.js';\nimport { Goal } from '../core/Goal.js';\n\n// Takes a list of interconnected frames and serializes them into a non cyclic json representation\nexport function serialize( frames ) {\n\n\tconst map = new Map();\n\tconst info = [];\n\n\t// Create the initial frame list along with a joint -> index map\n\tfor ( let i = 0, l = frames.length; i < l; i ++ ) {\n\n\t\tconst frame = frames[ i ];\n\n\t\tconst {\n\t\t\tname,\n\t\t\tdof,\n\t\t\tdofValues,\n\t\t\tdofTarget,\n\t\t\tdofRestPose,\n\t\t\tminDoFLimit,\n\t\t\tmaxDoFLimit,\n\t\t\ttargetSet,\n\t\t\trestPoseSet,\n\t\t\tposition,\n\t\t\tquaternion,\n\t\t\tisClosure,\n\t\t} = frame;\n\n\t\tlet type = 'Link';\n\t\tif ( frame.isGoal ) {\n\n\t\t\ttype = 'Goal';\n\n\t\t} else if ( frame.isJoint ) {\n\n\t\t\ttype = 'Joint';\n\n\t\t}\n\n\t\tconst res = {\n\t\t\tdof: dof ? dof.slice() : null,\n\t\t\tdofValues: dofValues ? dofValues.slice() : null,\n\t\t\tdofTarget: dofTarget ? dofTarget.slice() : null,\n\t\t\tdofRestPose: dofRestPose ? dofRestPose.slice() : null,\n\t\t\tminDoFLimit: minDoFLimit ? minDoFLimit.slice() : null,\n\t\t\tmaxDoFLimit: maxDoFLimit ? maxDoFLimit.slice() : null,\n\t\t\ttargetSet,\n\t\t\trestPoseSet,\n\t\t\tisClosure,\n\n\t\t\tname,\n\t\t\tposition: position.slice(),\n\t\t\tquaternion: quaternion.slice(),\n\t\t\tchildren: null,\n\t\t\tclosureJoints: null,\n\t\t\tchild: null,\n\t\t\ttype,\n\t\t};\n\n\t\tinfo.push( res );\n\t\tmap.set( frame, i );\n\n\t}\n\n\t// Create the child and parent index references.\n\tfor ( let i = 0, l = frames.length; i < l; i ++ ) {\n\n\t\tconst inf = info[ i ];\n\t\tconst frame = frames[ i ];\n\t\tinf.children = frame.children.map( c => map.get( c ) );\n\t\tif ( frame.isLink ) {\n\n\t\t\tinf.closureJoints = frame.closureJoints.map( c => map.get( c ) );\n\n\t\t}\n\n\t\tif ( frame.isJoint && frame.child ) {\n\n\t\t\tinf.child = map.get( frame.child );\n\n\t\t}\n\n\t\tif ( frame.parent ) {\n\n\t\t\tinf.parent = map.get( frame.parent );\n\n\t\t} else {\n\n\t\t\tinf.parent = null;\n\n\t\t}\n\n\t}\n\n\treturn info;\n\n}\n\n// Deserialize the serialized representation of the graph\nexport function deserialize( data ) {\n\n\t// Create joints / links for every serialized version\n\tconst frames =\n\t\tdata.map( d => {\n\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tname,\n\t\t\t\tposition,\n\t\t\t\tquaternion,\n\n\t\t\t\tdof,\n\t\t\t\tdofValues,\n\t\t\t\tdofTarget,\n\t\t\t\tdofRestPose,\n\t\t\t\tminDoFLimit,\n\t\t\t\tmaxDoFLimit,\n\t\t\t\ttargetSet,\n\t\t\t\trestPoseSet,\n\t\t\t\tisClosure,\n\t\t\t} = d;\n\n\t\t\tlet frame;\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'Goal':\n\t\t\t\tcase 'Joint':\n\t\t\t\t\tframe = type === 'Goal' ? new Goal() : new Joint();\n\n\t\t\t\t\tframe.setDoF( ...dof );\n\t\t\t\t\tframe.dofValues.set( dofValues );\n\t\t\t\t\tframe.dofTarget.set( dofTarget );\n\t\t\t\t\tframe.dofRestPose.set( dofRestPose );\n\t\t\t\t\tframe.minDoFLimit.set( minDoFLimit );\n\t\t\t\t\tframe.maxDoFLimit.set( maxDoFLimit );\n\n\t\t\t\t\tframe.targetSet = targetSet;\n\t\t\t\t\tframe.restPoseSet = restPoseSet;\n\t\t\t\t\tframe.isClosure = isClosure;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Link':\n\t\t\t\t\tframe = new Link();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tframe.name = name;\n\t\t\tframe.position.set( position );\n\t\t\tframe.quaternion.set( quaternion );\n\t\t\treturn frame;\n\n\t\t} );\n\n\t// set the parent and child from the maps\n\tfor ( let i = 0; i < frames.length; i ++ ) {\n\n\t\tconst frame = frames[ i ];\n\t\tconst info = data[ i ];\n\n\t\tframe.parent = frames[ info.parent ] || null;\n\t\tframe.children.push( ...info.children.map( i => frames[ i ] ) );\n\t\tframe.setMatrixNeedsUpdate();\n\n\t\tif ( frame.isLink ) {\n\n\t\t\tframe.closureJoints.push( ...info.closureJoints.map( i => frames[ i ] ) );\n\n\t\t}\n\n\t\tif ( frame.isJoint ) {\n\n\t\t\tframe.child = info.child !== null ? frames[ info.child ] : null;\n\t\t\tframe.setMatrixDoFNeedsUpdate();\n\n\t\t}\n\n\t}\n\n\treturn frames;\n\n}\n"],"names":["$ea1d8c014ac4cd16$export$fd293b15f47e270","$ea1d8c014ac4cd16$export$b67359430d3b1b2","Float32Array","Array","$ea1d8c014ac4cd16$export$5ada478c8a628231","Math","random","PI","$68bea3bd04a21f0e$export$185802fd694ee1f5","out","$68bea3bd04a21f0e$export$9cd59f9826255e47","a","$68bea3bd04a21f0e$export$784d13d8ee351f07","$68bea3bd04a21f0e$export$a82be99ed2a44a7d","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","$68bea3bd04a21f0e$export$adaa4cf7ef1b65be","$68bea3bd04a21f0e$export$f0954fd7d5368655","$68bea3bd04a21f0e$export$9cb09a71b7d66923","a01","a02","a03","a12","a13","a23","$68bea3bd04a21f0e$export$6897c284b6f9f4dc","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","$68bea3bd04a21f0e$export$33f3c024b4ae00a1","$68bea3bd04a21f0e$export$a04698f914c55ed9","$68bea3bd04a21f0e$export$2060d2db72cce88f","b","b0","b1","b2","b3","$68bea3bd04a21f0e$export$d73ee8ef04f5226a","v","x","y","z","$68bea3bd04a21f0e$export$dcdf75081b88279d","$68bea3bd04a21f0e$export$bb628a54ab399bc9","rad","axis","s","c","t","b12","b20","b21","b22","len","hypot","sin","cos","$68bea3bd04a21f0e$export$a59c8716592e09af","$68bea3bd04a21f0e$export$cf71e4d4ca4d1cfd","$68bea3bd04a21f0e$export$ea6eae3365de5b9c","$68bea3bd04a21f0e$export$bc9e79e74e9fddf6","$68bea3bd04a21f0e$export$832ca188ffb1955d","$68bea3bd04a21f0e$export$926fc125ff3c666c","$68bea3bd04a21f0e$export$dd47cc2f828c32ef","$68bea3bd04a21f0e$export$7dc997d67d2b7f33","$68bea3bd04a21f0e$export$ad5ddaedc8f405df","$68bea3bd04a21f0e$export$9545ac307f2a256b","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","$68bea3bd04a21f0e$export$ff497f2be31cc6a","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","$68bea3bd04a21f0e$export$202e99f82f7f0395","mat","$68bea3bd04a21f0e$export$71dc54d92bd04b57","$68bea3bd04a21f0e$export$df3937d3b537df0a","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","$68bea3bd04a21f0e$export$ddf9c55c9f2be172","sx","sy","sz","$68bea3bd04a21f0e$export$1def1f860edc4b1f","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","$68bea3bd04a21f0e$export$2ff2bbe382249af7","yx","zx","zy","$68bea3bd04a21f0e$export$89b5708c387cac6c","left","right","bottom","top","near","far","rl","tb","nf","$68bea3bd04a21f0e$export$4cf19729ec9a96b8","fovy","aspect","f","tan","Infinity","i","arguments","length","$68bea3bd04a21f0e$export$541149539f3a4684","$68bea3bd04a21f0e$export$294bba99a6af0c0c","$68bea3bd04a21f0e$export$58ae211c788e338f","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","$68bea3bd04a21f0e$export$c5f65ef3eb668f27","lr","bt","$68bea3bd04a21f0e$export$4f2167e613cfc87b","$68bea3bd04a21f0e$export$b1d31ea7b4d854e","$68bea3bd04a21f0e$export$d924e14fd6d9aa66","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","$68bea3bd04a21f0e$export$aa67782f4dc9e52c","target","$68bea3bd04a21f0e$export$42d51816ce590c93","$68bea3bd04a21f0e$export$326827e8268e9cdb","$68bea3bd04a21f0e$export$e16d8520af44a096","$68bea3bd04a21f0e$export$4e2d2ead65e5f7e3","$68bea3bd04a21f0e$export$c697bed75648cdb7","$68bea3bd04a21f0e$export$553579f63bdd7137","$68bea3bd04a21f0e$export$f2599a5cf1109d8","$68bea3bd04a21f0e$export$e9bab7fafb253603","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","$68bea3bd04a21f0e$export$6e3a27864ab166fe","$68bea3bd04a21f0e$export$f93b5905241a7cca","$b7b809ceae15d8f2$export$185802fd694ee1f5","$b7b809ceae15d8f2$export$9cd59f9826255e47","$b7b809ceae15d8f2$export$f24224f1c91d8156","$b7b809ceae15d8f2$export$a82be99ed2a44a7d","$b7b809ceae15d8f2$export$784d13d8ee351f07","$b7b809ceae15d8f2$export$adaa4cf7ef1b65be","$b7b809ceae15d8f2$export$e16d8520af44a096","$b7b809ceae15d8f2$export$4e2d2ead65e5f7e3","$b7b809ceae15d8f2$export$2060d2db72cce88f","$b7b809ceae15d8f2$export$cd007d971a5a2143","$b7b809ceae15d8f2$export$803ce6b71a0a94b2","ceil","$b7b809ceae15d8f2$export$a3fe094919f356fd","floor","$b7b809ceae15d8f2$export$96ec731ed4dcb222","min","$b7b809ceae15d8f2$export$8960430cfd85939f","$b7b809ceae15d8f2$export$2077e0241d6afd3c","round","$b7b809ceae15d8f2$export$dcdf75081b88279d","$b7b809ceae15d8f2$export$19cedf1da84ba854","$b7b809ceae15d8f2$export$9f17032d917177de","$b7b809ceae15d8f2$export$88e6ebb4fe54f538","$b7b809ceae15d8f2$export$ab44e1323ffc8376","$b7b809ceae15d8f2$export$aef51622e549b8b0","$b7b809ceae15d8f2$export$70ae2c07e401031b","$b7b809ceae15d8f2$export$a3295358bff77e","$b7b809ceae15d8f2$export$fc1400facf92c78","$b7b809ceae15d8f2$export$94132a0e348806d4","$b7b809ceae15d8f2$export$bb646b20bb93d339","$b7b809ceae15d8f2$export$3a89f8d6f6bf6c9f","$b7b809ceae15d8f2$export$ae8865616f30561c","d","factorTimes2","factor1","factor2","factor3","factor4","$b7b809ceae15d8f2$export$b9c5f84610baddaf","inverseFactor","inverseFactorTimesTwo","$b7b809ceae15d8f2$export$4385e60b38654f68","r","zScale","$b7b809ceae15d8f2$export$5ffbd13800309d59","m","$b7b809ceae15d8f2$export$f0bfa0a0024626ee","$b7b809ceae15d8f2$export$c32adef9e939ce85","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","$b7b809ceae15d8f2$export$a59c8716592e09af","p","$b7b809ceae15d8f2$export$cf71e4d4ca4d1cfd","$b7b809ceae15d8f2$export$ea6eae3365de5b9c","$b7b809ceae15d8f2$export$944b09d2ad10b378","mag","cosine","acos","$b7b809ceae15d8f2$export$7f9972325ebfd559","$b7b809ceae15d8f2$export$42d51816ce590c93","$b7b809ceae15d8f2$export$f2599a5cf1109d8","$b7b809ceae15d8f2$export$e9bab7fafb253603","vec","$b7b809ceae15d8f2$export$f93b5905241a7cca","$b7b809ceae15d8f2$export$6e3a27864ab166fe","$b7b809ceae15d8f2$export$159d9494db57879b","$b7b809ceae15d8f2$export$6c4a311cc157c764","$b7b809ceae15d8f2$export$2422cd6c492a8b3a","$b7b809ceae15d8f2$export$99d8dd3f32a3435","$b7b809ceae15d8f2$export$4b80e395e36b5a56","stride","offset","count","fn","arg","l","$dbd52ef81b4b12f3$export$185802fd694ee1f5","$dbd52ef81b4b12f3$export$9cd59f9826255e47","$dbd52ef81b4b12f3$export$a82be99ed2a44a7d","$dbd52ef81b4b12f3$export$784d13d8ee351f07","$dbd52ef81b4b12f3$export$adaa4cf7ef1b65be","$dbd52ef81b4b12f3$export$e16d8520af44a096","$dbd52ef81b4b12f3$export$4e2d2ead65e5f7e3","$dbd52ef81b4b12f3$export$2060d2db72cce88f","$dbd52ef81b4b12f3$export$cd007d971a5a2143","$dbd52ef81b4b12f3$export$803ce6b71a0a94b2","$dbd52ef81b4b12f3$export$a3fe094919f356fd","$dbd52ef81b4b12f3$export$96ec731ed4dcb222","$dbd52ef81b4b12f3$export$8960430cfd85939f","$dbd52ef81b4b12f3$export$2077e0241d6afd3c","$dbd52ef81b4b12f3$export$dcdf75081b88279d","$dbd52ef81b4b12f3$export$19cedf1da84ba854","$dbd52ef81b4b12f3$export$9f17032d917177de","$dbd52ef81b4b12f3$export$88e6ebb4fe54f538","$dbd52ef81b4b12f3$export$f24224f1c91d8156","$dbd52ef81b4b12f3$export$ab44e1323ffc8376","$dbd52ef81b4b12f3$export$aef51622e549b8b0","$dbd52ef81b4b12f3$export$70ae2c07e401031b","$dbd52ef81b4b12f3$export$a3295358bff77e","$dbd52ef81b4b12f3$export$fc1400facf92c78","$dbd52ef81b4b12f3$export$94132a0e348806d4","$dbd52ef81b4b12f3$export$bb646b20bb93d339","u","A","B","C","D","E","F","G","H","I","J","$dbd52ef81b4b12f3$export$3a89f8d6f6bf6c9f","$dbd52ef81b4b12f3$export$4385e60b38654f68","v1","v2","v3","v4","s1","s2","$dbd52ef81b4b12f3$export$5ffbd13800309d59","$dbd52ef81b4b12f3$export$c32adef9e939ce85","ix","iy","iz","iw","$dbd52ef81b4b12f3$export$7f9972325ebfd559","$dbd52ef81b4b12f3$export$42d51816ce590c93","$dbd52ef81b4b12f3$export$f2599a5cf1109d8","$dbd52ef81b4b12f3$export$e9bab7fafb253603","$dbd52ef81b4b12f3$export$f93b5905241a7cca","$dbd52ef81b4b12f3$export$6e3a27864ab166fe","$dbd52ef81b4b12f3$export$159d9494db57879b","$dbd52ef81b4b12f3$export$6c4a311cc157c764","$dbd52ef81b4b12f3$export$2422cd6c492a8b3a","$dbd52ef81b4b12f3$export$99d8dd3f32a3435","$dbd52ef81b4b12f3$export$4b80e395e36b5a56","$c3d83c08144ce4b3$export$185802fd694ee1f5","$c3d83c08144ce4b3$export$f0954fd7d5368655","$c3d83c08144ce4b3$export$4286ddefc8f49512","$c3d83c08144ce4b3$export$3f70be5e7d7dc51","out_axis","$c3d83c08144ce4b3$export$b363da9ded343252","dotproduct","$c3d83c08144ce4b3$export$94132a0e348806d4","$c3d83c08144ce4b3$export$2060d2db72cce88f","$c3d83c08144ce4b3$export$a59c8716592e09af","$c3d83c08144ce4b3$export$cf71e4d4ca4d1cfd","$c3d83c08144ce4b3$export$ea6eae3365de5b9c","$c3d83c08144ce4b3$export$fb72b72e8d764d4e","$c3d83c08144ce4b3$export$b310ec824aaee37f","et","exp","$c3d83c08144ce4b3$export$876cb1b29620556f","atan2","log","$c3d83c08144ce4b3$export$9c297f60e22e3389","$c3d83c08144ce4b3$export$dcdf75081b88279d","$c3d83c08144ce4b3$export$1544d9bc2995de08","omega","cosom","sinom","scale0","scale1","$c3d83c08144ce4b3$export$4385e60b38654f68","u1","u2","u3","sqrt1MinusU1","sqrtU1","$c3d83c08144ce4b3$export$6897c284b6f9f4dc","invDot","$c3d83c08144ce4b3$export$7679f47e72c62560","$c3d83c08144ce4b3$export$272a1eb8e5a4b55b","fRoot","fTrace","j","k","$c3d83c08144ce4b3$export$7a404a587ea85af","halfToRad","cx","cy","cz","$c3d83c08144ce4b3$export$42d51816ce590c93","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","$c3d83c08144ce4b3$export$9cd59f9826255e47","$c3d83c08144ce4b3$export$a82be99ed2a44a7d","$c3d83c08144ce4b3$export$784d13d8ee351f07","$c3d83c08144ce4b3$export$adaa4cf7ef1b65be","$c3d83c08144ce4b3$export$e16d8520af44a096","$c3d83c08144ce4b3$export$6e3a27864ab166fe","$c3d83c08144ce4b3$export$3a89f8d6f6bf6c9f","$c3d83c08144ce4b3$export$f24224f1c91d8156","$c3d83c08144ce4b3$export$fc1400facf92c78","$c3d83c08144ce4b3$export$ab44e1323ffc8376","$c3d83c08144ce4b3$export$99d8dd3f32a3435","$c3d83c08144ce4b3$export$a3295358bff77e","$c3d83c08144ce4b3$export$f2599a5cf1109d8","$c3d83c08144ce4b3$export$e9bab7fafb253603","$c3d83c08144ce4b3$export$72d66f5842c00904","$c3d83c08144ce4b3$export$699b0866ca50f6cb","$c3d83c08144ce4b3$export$937ca0a544b2d712","view","$0e0afc0f30f3b9f9$var$tempQuat","Float64Array","$0e0afc0f30f3b9f9$export$a8a3bfe34be44555","output","$dbd52ef81b4b12f3$exports","scale","squaredDistance","subtract","$0e0afc0f30f3b9f9$var$tempQuat2","$3c1c5d68e156a96f$export$6b5c1ceb16d01dc3","$3c1c5d68e156a96f$export$f4644083ce95e7e3","$3c1c5d68e156a96f$export$f504979d7e0a75c7","$3c1c5d68e156a96f$export$460c4029b1a54a2e","$3c1c5d68e156a96f$export$914076c8150813e5","$368b4fd082e75028$var$tempInverse","$368b4fd082e75028$var$tempMatrix","$368b4fd082e75028$var$tempQuat","$368b4fd082e75028$var$tempPos","$368b4fd082e75028$var$sharedTraversedChildren","Set","$368b4fd082e75028$var$sharedTraverseArray","$368b4fd082e75028$var$traverseVariablesInUse","$368b4fd082e75028$export$b89a827e9254211a","this","name","quaternion","position","matrix","$68bea3bd04a21f0e$exports","identity","matrixWorld","matrixNeedsUpdate","matrixWorldNeedsUpdate","parent","children","setPosition","args","$b7b809ceae15d8f2$exports","sqrDist","setMatrixNeedsUpdate","setEuler","$c3d83c08144ce4b3$exports","fromEuler","setQuaternion","squaredLength","setWorldPosition","updateMatrixWorld","invert","transformMat4","setWorldEuler","setWorldQuaternion","fromQuat","multiply","getRotation","getWorldPosition","arr","getTranslation","getWorldQuaternion","traverseParents","cb","traversedChildren","originalVariablesInUse","clear","curr","has","add","traverse","stack","tot","child","fill","find","result","addChild","Error","push","setMatrixWorldNeedsUpdate","removeChild","index","indexOf","splice","attachChild","detachChild","copy","computeMatrixWorld","updateMatrix","fromRotationTranslation","updateChildren","$9d3ed3aaceb752f8$export$b46d3ef053550600","value","$9d3ed3aaceb752f8$export$9aa19a843d95c885","toAdjust","delta","sign","$9d3ed3aaceb752f8$export$3964a90a291b4653","$9d3ed3aaceb752f8$export$1206a1c57e3e8c74","$9d3ed3aaceb752f8$export$fe272d9e30b3a36d","input","$9d3ed3aaceb752f8$export$9a13674a8d8a082","euler","pivotAngle","$9d3ed3aaceb752f8$export$c6b2341fc2293434","zRotationSign","combinedXRotation","$9d3ed3aaceb752f8$var$tempEuler1","$9d3ed3aaceb752f8$var$tempEuler2","$9d3ed3aaceb752f8$export$c4f2856bdb014cf8","score","d1","d2","$11354c8b265a820b$var$tempPos","$11354c8b265a820b$var$tempQuat","$11354c8b265a820b$var$tempPos2","$11354c8b265a820b$var$tempQuat2","$11354c8b265a820b$export$e2c8eaee09f58d46","outPos","outQuat","$5e3f97ad89eace5d$export$56c61517b6ca2097","X","Y","Z","EX","EY","EZ","$5e3f97ad89eace5d$export$ff1a3cb7efecd8f4","Object","entries","sort","map","e","$5e3f97ad89eace5d$var$tempInverse","$5e3f97ad89eace5d$var$tempMatrix","$5e3f97ad89eace5d$var$tempQuat","$5e3f97ad89eace5d$var$tempEuler","$5e3f97ad89eace5d$var$tempValueEuler","$5e3f97ad89eace5d$var$quatEuler","$5e3f97ad89eace5d$var$tempDoFValues","$5e3f97ad89eace5d$var$dofToMatrix","dof","$5e3f97ad89eace5d$export$6a0d2ab5fd042395","super","isJoint","isClosure","trackJointWrap","rotationDoFCount","translationDoFCount","dofFlags","Uint8Array","dofValues","dofTarget","dofRestPose","minDoFLimit","maxDoFLimit","targetSet","restPoseSet","matrixDoFNeedsUpdate","matrixDoF","cachedIdentityDoFMatrixWorld","_getQuaternion","_getEuler","outEuler","_getPosition","_setValue","minVal","maxVal","_setValues","values","_setViaFullPosition","_setViaFullEuler","tryMinimizeEulerAngles","_setViaQuaternion","quat","t0","t1","roll","t2","pitch","asin","t3","t4","yaw","$11354c8b265a820b$export$7f60f5816f0cb807","clearDoF","setDoF","forEach","includes","setMatrixDoFNeedsUpdate","i1","Number","setDoFValues","setDoFValue","getDoFValue","getDoFQuaternion","getDoFEuler","getDoFPosition","setRestPoseValues","setRestPoseValue","getRestPoseValue","getRestPoseQuaternion","getRestPoseEuler","getRestPosePosition","setTargetValues","setTargetValue","getTargetValue","getTargetQuaternion","getTargetEuler","getTargetPosition","setMinLimits","setMinLimit","getMinLimit","setMaxLimits","setMaxLimit","getMaxLimit","getClosureError","getDeltaWorldMatrix","outMatrix","set","currVal","minSlack","maxSlack","newVal","doInvert","updateDoFMatrix","makeClosure","isLink","closureJoints","$5f97695ef8dccb20$var$tempPos","$5f97695ef8dccb20$var$tempQuat","$5f97695ef8dccb20$var$tempEuler","$5f97695ef8dccb20$export$967f2bb0e111ae9","solver","joint","startIndex","errorVector","isConverged","rowCount","totalError","translationConvergeThreshold","rotationConvergeThreshold","translationErrorClamp","rotationErrorClamp","translationFactor","rotationFactor","isGoal","posMag","rotMag","$5f97695ef8dccb20$export$d49df4326d0bc155","lockedJointDoFCount","lockedJointDoF","dofList","posDelta","distance","rotDelta","lockedDoFCount","get","lockedDoF","isLocked","rowIndex","eulerMag","l1","$038d5c1ae7480c4f$var$linear","Mat","data","mirror","cols","prototype","swap","tmp","multline","line","addmul","lineI","lineJ","hasNullLine","gauss","pivot","lines","columns","nullLines","maxValue","maxLine","val","$038d5c1ae7480c4f$exports","solve","n","id","$90ec529e3363594c$var$create","row","col","$90ec529e3363594c$var$copy","sourceMatrix","tr","tc","$90ec529e3363594c$var$magnitudeSquared","sum","rows","$90ec529e3363594c$var$toString","dec","str","toFixed","$6aabce5c8a77e623$exports","r1","SVD","pow","TypeError","h","M","g","T","VERSION","defineProperty","define","amd","globalThis","self","SVDJS","$90ec529e3363594c$export$1072999852abd226","scalar","ti","resultMatrix","vector","res","$parcel$interopDefault","ru","rq","rv","urows","vrows","qrows","r2","rqrow","qval","console","$6c26d6851d01f666$var$targetRelativeToJointMatrix","$6c26d6851d01f666$var$targetDeltaWorldMatrix","$6c26d6851d01f666$var$tempDeltaWorldMatrix","$6c26d6851d01f666$var$tempInverseMatrixWorld","$6c26d6851d01f666$var$tempQuat","$6c26d6851d01f666$var$tempPos","$6c26d6851d01f666$var$tempQuat2","$6c26d6851d01f666$var$tempPos2","$6c26d6851d01f666$var$targetJoints","$6c26d6851d01f666$var$freeJoints","$6c26d6851d01f666$var$errorResultInfo","$6c26d6851d01f666$var$dofResultInfo","errorRows","freeDoF","$6c26d6851d01f666$export$91ee41fcbdd7b0d1","CONVERGED","STALLED","DIVERGED","TIMEOUT","el","$6c26d6851d01f666$export$773d69d6679f5a14","chain","from","targets","affectedClosures","affectedConnectedClosures","prevDoFValues","maxIterations","matrixPool","useSVD","translationStep","rotationStep","stallThreshold","dampingFactor","divergeThreshold","restPoseFactor","init","filter","Map","currJoint","iterations","prevErrorMagnitude","status","releaseAll","countUnconvergedVariables","fillErrorVector","jacobian","fillJacobian","pseudoInverse","failedSVD","svd","uTranspose","qInverse","transpose","inv","vqinv","err","jacobianIdentityDamping","jacobianTranspose","jjt","jjti","jjtii","deltaTheta","restPose","restPoseResult","colIndex","colCount","jij","ident","nullSpaceProjection","stalled","applyJointAngles","freeJoints","lockedJoint","dti","lockedCount","targetJoints","outJacobian","freeJoint","relevantClosures","relevantConnectedClosures","co","targetJoint","totalRows","dofResultInfo","unconvergedRows","addToTargetList","$1477b303c08e6652$var$FixedMatrixPool","matrices","create","$1477b303c08e6652$export$b9f89a165674761c","pools","poolArray","colPools","pool","$c9aedc0db0687b79$export$a6c7ac8248d6e38a","$15ba047800877f7d$export$462e530a9b3886e4","setFreeDoF","rotCount","setGoalDoF","$cafd5eead47678a5$export$8f025619fdb658dc","$cafd5eead47678a5$export$d04855003a0a42e4","frames","floatBuffer","byteBuffer","copyDoFValues","copyJointSettings","$cafd5eead47678a5$export$89fd71e6bef037f5","frame","byteOffset","floatOffset","$cafd5eead47678a5$export$67a5d34c11eb77f5","Boolean","changed","$fa9c5b7219e529c4$var$useSharedArrayBuffers","SharedArrayBuffer","$fa9c5b7219e529c4$var$solver","roots","isArray","solvers","updateStructure","potentialRoots","lastParent","closureConnections","cl","$e23ff6eeb506e5ab$export$1c488bb2de2b023a","chains","traversal","allChainJoints","traverseChains","chainSet","delete","independentChains","currChain","pop","otherChain","dependent","nonChainJoints","root","results","$fa9c5b7219e529c4$var$solveHandle","$fa9c5b7219e529c4$var$frames","$fa9c5b7219e529c4$var$buffer","$fa9c5b7219e529c4$var$floatBuffer","$fa9c5b7219e529c4$var$byteBuffer","$fa9c5b7219e529c4$var$updateSolve","$cafd5eead47678a5$export$2ce42ee63d5702c3","setTimeout","postMessage","type","resultsBuffer","slice","buffer","$parcel$global","onmessage","info","$a02ddbbd5521c8f4$export$efcd34ab6248d3cd","serialized","assign","clearTimeout"],"version":3,"file":"workerSolver.worker.121d601e.js.map"}